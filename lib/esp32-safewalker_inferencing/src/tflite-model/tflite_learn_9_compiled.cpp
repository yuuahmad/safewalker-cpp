/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.09.2023 09:20:12

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242560;
#else
constexpr int kTensorArenaSize = 241536;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 41262, -42777, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00012903563037980348, 0.00012466315820347518, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 49,-46,-58,117,-61,-5,-48,55,127,-34,-43,-32,-26,65,-35,40,112,-98,-39,-97,96,60,58,-76,-49,-100,-37,80,-15,-73,-18,61, 
  /* [1][0][][] */ 61,79,77,-68,-82,80,-8,15,-39,-15,38,112,118,44,40,-2,-42,1,-63,-92,-79,41,35,117,89,76,-49,-7,117,-110,-127,-16, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0035711571108549833, 0.0034501457121223211, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 312, 349, 338, 254, 110, 367, -535, 329, -300, -410, 336, 341, 315, 269, 283, -435, -432, 34, -259, -447, -458, 357, 305, 423, 199, 278, -422, -264, 542, -203, 1019, -463, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.7057692679809406e-05, 3.736849976121448e-05, 3.7586640246445313e-05, 4.1671581129776314e-05, 3.3942491427296773e-05, 3.5399458283791319e-05, 3.6990149965276942e-05, 3.4113520086975768e-05, 3.5283366742078215e-05, 3.5901288356399164e-05, 3.6761313822353259e-05, 3.344284777995199e-05, 3.603811637731269e-05, 3.5891865991288796e-05, 3.502242179820314e-05, 3.5391320125199854e-05, 3.5199125704821199e-05, 4.2692845454439521e-05, 3.3699361665640026e-05, 3.5029308492084965e-05, 3.3551041269674897e-05, 3.6287940019974485e-05, 3.544337596395053e-05, 3.5885099350707605e-05, 3.5579261748353019e-05, 3.7018373404862359e-05, 3.5759519960265607e-05, 3.4598455386003479e-05, 4.1910534491762519e-05, 3.4982585930265486e-05, 4.3709849705919623e-05, 3.6698143958346918e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -32,-58,106,16,87,-14,-97,-103,63,-102,-108,-19,61,16,-26,53,-45,-43,-56,-46,-60,-92,12,97,-113,9,86,-45,113,5,-30,-77,74,-59,-82,69,-99,-71,-83,30,48,-97,-88,92,49,-112,111,-10,-17,-56,-27,76,-70,-63,-95,111,22,74,118,-103,-63,71,-43,45,-2,10,77,92,61,105,91,-112,101,-92,45,80,-102,18,-48,40,57,20,97,-29,-52,-45,-79,94,29,117,-3,-127,8,72,31,24, 
  /* [1][0][][] */ -51,31,-62,6,-39,81,30,4,86,-103,-96,96,73,-18,36,66,118,-40,42,123,-36,6,45,21,37,17,-26,108,19,14,91,-57,54,104,1,36,60,66,-6,-49,-75,-3,-14,-92,-30,34,-21,-42,-40,-83,118,51,16,79,-77,-38,24,109,65,88,-45,110,-59,-75,-47,32,83,42,112,39,27,14,-104,95,-41,47,86,-36,-28,82,-70,85,-42,-127,35,112,-58,-65,79,84,98,14,76,96,35,0, 
  /* [2][0][][] */ 49,34,-51,98,-24,-54,77,86,-86,78,-30,105,96,-6,92,-104,-42,-27,39,61,-83,-3,116,13,-22,76,114,12,-58,85,71,97,-71,-17,-78,-95,-73,97,108,-13,-127,-83,21,-5,-77,110,-15,-64,78,35,93,-93,-40,58,20,27,-72,103,-54,12,-5,55,-29,68,96,42,55,84,-79,76,18,-65,37,-66,37,27,-46,-16,16,21,43,-89,-2,-55,9,-95,-10,-32,89,113,-16,-4,-50,-72,-36,-61, 
  /* [3][0][][] */ 68,0,46,-3,-56,48,-89,56,49,37,55,30,81,91,65,7,91,83,-18,21,107,-72,-57,-86,-9,-81,-72,93,46,-82,82,6,-15,-28,-10,-8,-77,6,42,37,-6,-62,-75,0,80,31,-37,-71,71,-56,42,14,90,30,100,-82,-81,-105,-97,-58,-85,42,-26,74,48,-25,-47,-23,-26,-33,8,94,22,-48,49,-24,27,127,84,-51,-70,-85,53,100,26,49,-33,-91,-58,57,12,-89,121,-77,-74,84, 
  /* [4][0][][] */ 59,110,1,64,-24,-24,50,42,63,112,-14,69,31,-34,-15,-71,-31,3,-65,21,113,-96,92,56,-13,13,59,-58,-49,35,-70,-57,98,127,22,-110,-53,-1,-122,49,-42,-40,-75,-89,50,111,37,55,44,-36,-24,-72,-94,56,-80,29,39,-104,29,8,1,-65,-38,-60,-55,65,-2,-35,26,-100,-101,-81,-49,29,104,67,63,-1,-8,-62,7,-42,-85,-9,-2,81,99,7,-107,-67,51,64,43,102,-103,-5, 
  /* [5][0][][] */ 102,-94,85,92,38,-114,21,52,115,-122,2,-75,32,107,48,40,74,59,-67,108,41,63,27,-34,-103,-65,-3,-89,57,39,11,-95,-44,4,-61,25,-107,-30,54,34,-105,-63,49,99,-31,22,43,-43,-127,105,32,26,45,13,34,-13,106,62,-49,-33,43,-71,43,-72,-24,100,-18,30,86,13,114,-68,-44,84,-22,-73,15,-42,23,95,115,45,36,94,-76,81,2,37,72,-95,127,80,-24,33,82,-80, 
  /* [6][0][][] */ 16,-44,103,66,-83,-52,-2,64,-20,-77,3,-66,78,46,104,-118,38,14,-8,91,-83,-122,98,60,-66,-86,-15,-62,-34,-114,47,-57,-92,-120,-51,-109,-16,31,-112,95,92,51,16,-15,-113,101,-92,-52,-70,11,-32,-63,52,-42,91,-32,8,-10,-71,127,-98,23,60,-74,-56,66,90,-49,69,-13,-110,-11,50,-74,-93,-44,-82,-106,-63,-36,26,-30,35,-26,-74,-92,-44,-96,75,84,85,33,-44,-67,68,-34, 
  /* [7][0][][] */ 125,73,-35,-40,-76,123,-23,-1,127,1,-94,13,64,-87,58,83,62,20,6,127,64,44,2,83,-70,109,54,63,-76,122,-22,44,22,27,77,113,-103,99,-1,-17,92,-88,97,76,54,-5,110,-109,41,-59,-108,-75,-21,94,21,37,122,-85,10,-50,20,-7,91,-116,-66,-61,82,27,-106,29,76,95,92,33,71,65,-63,61,-96,57,103,-37,-13,-88,99,36,-109,98,90,13,98,60,-63,-37,6,-62, 
  /* [8][0][][] */ 13,34,-52,-99,62,21,-69,-21,0,57,39,93,-2,-51,-93,-78,-79,98,-66,9,23,-31,74,117,-127,105,34,72,-76,12,-94,114,104,-31,41,-6,109,-3,-28,60,96,108,-121,-125,-17,-34,-29,102,39,-91,-73,0,-73,-8,-33,-117,60,102,-107,100,104,43,39,107,-42,-47,-27,105,-95,43,24,-7,76,63,4,19,-56,99,74,67,28,84,-123,-83,21,39,66,-46,33,-47,-93,108,-71,-107,-58,59, 
  /* [9][0][][] */ 1,6,109,39,83,-110,-49,-122,39,54,-15,66,-31,-85,-108,-34,1,5,-109,-78,-3,95,-118,-92,105,-12,-23,22,-18,-70,-87,98,69,-1,20,-25,-86,7,-45,-49,57,-73,47,-95,81,16,-111,44,65,-16,-92,-54,67,-68,-75,99,87,-66,-23,-7,-98,115,76,-81,-96,8,95,44,-48,93,102,-98,3,72,-114,-102,-83,-127,-49,97,26,24,93,32,-50,-103,31,-24,93,23,-37,126,115,-4,54,-43, 
  /* [10][0][][] */ -56,77,97,-57,-19,106,97,23,45,23,27,-72,108,88,-20,13,-21,78,-90,-52,-9,40,66,-74,33,52,-100,-107,-39,87,-97,-74,79,100,127,80,-30,13,-26,49,-51,102,-101,-36,-92,-61,6,-48,-19,0,43,2,66,18,-65,-23,-104,-2,35,-37,8,77,114,42,124,-76,-86,-22,33,-8,-82,-62,90,70,-75,106,-10,71,77,33,83,2,64,86,-91,64,108,-28,37,14,3,-77,-58,-42,-36,-61, 
  /* [11][0][][] */ 124,-2,-8,120,124,49,46,28,124,97,-81,98,4,-82,44,-67,-47,-123,77,51,44,92,34,-127,-118,-101,-7,76,95,3,18,-18,-102,-75,67,59,-61,88,-27,-60,-49,94,-72,-6,-47,-67,-90,-86,45,112,124,44,-100,-118,14,38,-73,-46,-37,-84,-76,86,95,5,39,90,-48,35,107,74,-80,-78,51,115,-100,52,-70,40,-36,107,-107,-24,-69,-77,57,-92,18,-37,-101,-6,21,-125,-96,-24,-75,-39, 
  /* [12][0][][] */ 18,63,-48,9,85,11,-42,29,-69,55,-10,9,-35,21,61,-78,-86,-33,-41,-72,36,1,27,89,-68,-49,115,-97,101,23,-40,122,-91,-67,-35,24,8,-68,-11,57,101,24,-102,-40,-18,-87,-31,127,-61,-116,-70,96,41,-1,-83,96,-23,-45,59,76,72,112,1,55,120,31,-36,118,68,113,51,76,89,119,-10,-7,-30,42,-104,-82,-50,106,55,-4,-28,29,63,108,-93,-105,100,33,96,-7,37,78, 
  /* [13][0][][] */ 113,-63,107,103,91,117,76,60,79,-107,18,-33,98,78,77,-50,-109,-69,-64,36,76,-19,127,-58,-66,40,18,19,-81,-82,80,43,36,106,-13,44,-74,-24,32,82,-74,63,-45,13,-42,25,2,-22,21,102,-28,-113,-95,30,101,-75,-49,39,-16,-65,-14,116,-72,14,-46,-65,-84,87,-28,-3,105,3,-89,43,-71,-43,-103,73,92,-54,58,-96,104,8,-77,-106,101,112,-10,-49,-69,45,109,-46,76,-2, 
  /* [14][0][][] */ -69,-104,96,79,78,-34,-27,-126,-70,-49,70,72,-24,-78,-81,-92,-44,-70,18,35,-34,42,8,59,-111,-78,-20,36,-108,-114,-93,31,105,-33,-24,13,110,127,41,-112,-26,-124,45,90,74,-122,72,-76,110,38,87,51,105,-22,-24,22,-55,15,56,92,-7,-91,-26,73,-85,-23,88,-121,-82,-82,-81,100,2,91,53,-76,64,-98,69,48,54,-24,-112,-55,-120,-90,-109,109,116,16,99,-73,74,112,-8,68, 
  /* [15][0][][] */ 14,-25,-36,66,98,-91,74,-92,55,11,-72,40,98,-5,-104,-117,77,25,-100,16,40,12,65,109,77,72,28,89,14,51,78,-102,15,6,-73,-10,-76,108,106,-68,51,117,-56,-25,16,-80,-57,-89,5,-81,-11,31,-105,-71,-47,-19,73,45,-54,114,-53,-53,-3,103,-44,101,-80,4,-72,-6,55,-78,14,-19,55,-110,-8,47,98,71,-90,54,-117,-46,-127,-40,-98,34,82,65,-122,-10,63,106,-113,111, 
  /* [16][0][][] */ -78,4,97,-72,46,111,-46,47,39,53,-113,80,-27,-59,-69,-63,95,84,64,56,102,67,-51,59,-37,56,-85,61,-113,6,48,6,-104,75,45,50,-46,47,-57,-84,42,-35,65,93,60,107,91,-24,-38,-113,-1,120,-47,123,71,32,30,77,64,6,107,114,30,63,47,15,-47,93,32,86,-44,-14,24,88,58,89,-18,91,-124,-25,6,-89,50,30,4,104,94,12,77,8,-23,127,77,-42,-94,23, 
  /* [17][0][][] */ 50,-118,50,93,-64,-82,-92,-111,56,-91,44,24,116,70,-65,20,62,19,85,122,-56,16,39,-28,-6,41,-30,35,115,-26,-54,64,-41,-12,55,12,-15,84,-80,-6,-114,-70,7,-25,25,-14,106,-70,45,72,-13,-9,-11,40,53,-31,-127,108,-61,-99,41,-81,43,65,-47,-57,39,-97,-62,31,119,19,37,-106,-68,29,99,-15,66,-22,27,-4,-45,-113,-83,31,90,-49,-4,43,-62,-116,-30,89,15,-12, 
  /* [18][0][][] */ -101,104,116,-75,-13,-119,-111,9,-11,79,-120,-53,-41,36,61,-60,20,-30,59,-29,103,-50,18,-72,24,-105,-25,118,27,33,-5,43,46,-29,-118,-115,-38,31,-42,63,-48,16,-58,-9,-119,12,24,-7,22,-29,71,34,-121,-11,-3,92,-49,33,-26,-127,85,116,10,35,-78,-126,-37,96,70,-73,-82,110,-103,-45,-94,-114,55,57,-6,-79,-64,-7,-33,-74,109,-39,69,70,-117,-82,-67,113,93,-58,45,-22, 
  /* [19][0][][] */ 16,28,72,33,59,-87,96,92,91,-62,25,-11,-102,29,-62,58,70,-109,104,54,-27,76,-62,19,75,-84,24,-72,-98,-124,-71,44,83,-87,28,-4,5,-76,-62,-107,46,-119,-88,7,-93,28,73,-100,-28,34,-44,45,-40,11,3,-16,26,95,-7,-30,52,-58,99,59,-76,-3,-31,-4,-15,47,71,-56,-68,-127,-61,-85,-27,-118,10,104,55,-120,-35,80,-92,-9,2,-6,88,27,-10,71,-28,115,67,-54, 
  /* [20][0][][] */ -11,76,69,94,-94,94,22,61,14,23,-97,1,-13,88,35,-82,-62,-43,-78,-41,18,-53,-89,-68,78,-78,-121,47,18,6,-45,116,117,47,-23,53,36,-41,-25,-127,-80,-33,-101,-111,-30,-69,-78,104,85,-126,-116,46,44,122,51,-6,100,67,97,90,110,-55,-76,-41,-37,-67,-64,14,-97,-89,-79,77,-71,-97,25,18,112,78,109,108,85,4,83,-16,58,123,-24,78,17,97,24,81,32,20,-13,0, 
  /* [21][0][][] */ 95,73,77,-95,94,-76,66,15,3,-74,-66,38,12,44,-40,-86,-93,-30,33,-6,114,-39,78,-89,58,-86,-21,75,22,12,-11,-17,2,21,-83,-107,118,102,-108,-19,-16,-1,35,-12,-94,-84,-75,100,-41,-68,-1,80,40,67,-95,34,-60,62,-45,127,65,-76,17,-11,87,28,-26,-68,-95,6,66,81,36,-16,77,68,-107,-25,71,113,19,99,40,-83,31,-95,71,-84,-101,82,114,-122,-54,-61,74,-25, 
  /* [22][0][][] */ 34,-57,-67,-91,87,-56,104,52,-93,69,-72,-113,122,-108,-108,-83,43,81,-111,-53,98,-70,43,22,95,-9,-104,104,-53,-72,-65,-111,40,62,28,13,12,-7,-49,-109,-6,-18,9,98,62,-120,97,-14,-80,-85,12,-20,-58,-97,-48,44,-31,-20,-15,-30,124,-81,-75,-111,-59,15,-106,-49,124,117,-17,5,-66,15,73,-92,49,-50,78,105,116,-100,-70,-127,86,88,111,-32,-53,40,-61,50,-6,17,-21,107, 
  /* [23][0][][] */ 68,-88,12,65,96,-109,0,-102,64,-88,93,70,28,-100,32,-36,102,-31,-100,109,102,-71,113,-40,-14,-14,97,26,79,58,69,-29,-43,47,30,41,107,0,-104,23,-112,-8,17,-105,-65,-92,121,36,53,-111,-82,-55,87,-58,-52,99,-87,-6,105,59,-101,-89,-47,-8,42,38,-106,-107,74,-3,121,-66,0,-29,-31,-94,51,-15,105,127,-46,-49,29,-117,101,7,122,-22,-87,47,113,-17,100,-45,-24,89, 
  /* [24][0][][] */ -76,-52,-100,-66,-89,-107,-71,-96,68,107,91,51,123,67,-32,-114,-74,46,27,-50,103,-73,-48,-51,49,-35,88,61,114,65,7,-55,-11,11,57,34,-47,-86,71,-6,-82,-113,111,9,24,-40,41,79,-104,-51,-17,11,78,60,74,-67,-9,91,31,14,106,-2,42,100,-94,99,-39,-90,-94,61,-53,-22,-37,38,104,103,69,-82,-96,-77,-74,-97,-60,-127,11,57,-4,-111,25,-109,9,-81,-24,35,-84,31, 
  /* [25][0][][] */ -79,-61,-72,-2,87,-69,-107,49,48,-116,-34,22,80,6,-95,-21,-59,58,41,-99,74,93,-3,-62,11,-52,-85,39,82,-80,34,118,85,-105,52,77,103,-52,-17,-5,-93,80,-97,2,98,36,73,44,-119,88,-65,-5,44,-21,-61,20,-23,63,-104,81,127,41,55,43,8,72,-7,-5,-78,7,-15,-111,39,-106,76,18,74,74,25,30,54,52,-40,64,-66,-51,-93,-99,-26,-37,109,14,-120,-5,-14,-78, 
  /* [26][0][][] */ 48,-120,-28,-18,-97,-8,-10,-15,-110,-127,103,95,-86,-55,2,-19,110,32,-85,-72,8,64,95,24,50,60,7,43,8,-1,-92,-6,-33,-67,-106,-109,-70,81,-57,107,-96,108,53,30,-73,74,-45,98,3,25,-9,103,7,-48,-3,-113,95,58,52,23,-5,-94,60,-24,111,-20,-64,53,-95,76,83,93,76,-100,-93,6,43,-108,-104,4,-33,71,80,-66,73,1,-50,12,-87,111,6,25,-60,110,47,84, 
  /* [27][0][][] */ 12,8,-69,-109,-127,-79,-70,-16,43,105,34,-102,-30,57,82,-35,61,-7,59,-91,-99,11,-34,-2,-111,48,-123,-5,65,26,-36,-14,77,70,-93,-93,-96,-70,-120,92,-91,18,25,16,102,21,67,100,124,72,52,-79,-96,-72,-10,-35,104,-28,-118,-86,-64,-60,-40,55,31,-48,-122,107,46,3,-124,13,64,-54,-13,-91,45,-63,88,101,84,-31,116,-58,-79,-88,-31,38,-49,-10,-40,-39,61,12,94,57, 
  /* [28][0][][] */ 88,3,83,48,-101,-49,-88,-63,-19,-97,62,48,-55,-63,20,99,94,89,-59,63,-6,33,-87,-71,-127,72,-55,-42,-51,-48,-6,-3,-100,25,80,72,4,-90,-27,33,69,5,-74,48,-97,4,20,52,-23,-49,-67,-41,-81,7,46,43,50,2,39,58,9,-32,-75,-3,48,73,-3,81,-52,31,-76,-44,71,29,8,-78,-85,-45,-57,53,-54,-73,83,-54,64,-116,60,-91,-92,-89,-19,-54,-32,54,-118,-58, 
  /* [29][0][][] */ 51,58,58,-54,-81,14,-115,12,100,-1,-94,-96,106,-109,-53,-48,-106,104,29,-67,-78,-41,53,23,-36,14,-50,-28,-107,-10,113,-8,62,2,-85,-60,-14,105,-12,84,61,122,-48,86,9,111,-54,-29,37,-5,61,-90,74,-99,118,45,-89,51,-51,104,-124,103,-98,-50,-62,-60,52,92,94,-89,31,-69,114,79,59,28,115,-64,-34,30,-6,-81,-10,-61,60,127,41,88,-37,99,70,92,-96,17,-7,60, 
  /* [30][0][][] */ 36,-20,-32,46,-62,44,-20,27,103,4,21,-1,-73,27,57,40,6,57,86,-66,46,-75,-73,33,-56,36,-50,127,0,-68,-48,20,-48,-39,-86,-34,20,5,23,40,105,-18,8,124,112,-2,91,57,-25,81,25,-46,114,-5,17,96,-60,-32,-33,-32,-63,29,-47,10,-74,-40,-65,95,-39,102,48,3,-63,110,54,-29,-21,-53,-55,-42,43,40,-69,28,-78,64,-70,127,1,-55,79,79,-11,9,34,-31, 
  /* [31][0][][] */ 74,-94,31,94,46,61,-59,-100,-34,-22,-83,-85,90,-127,-56,106,-64,-89,30,43,57,27,-35,106,40,-119,29,36,-77,-77,44,102,13,15,-97,-15,91,-36,-72,-111,61,-67,-35,30,2,-56,-46,19,75,21,87,-28,-117,-58,-82,16,-123,62,0,109,-44,0,81,-78,64,110,-53,-82,65,-123,-123,5,-100,-47,-2,4,-62,-50,44,84,-80,-48,51,74,51,91,-98,14,13,-56,-90,-49,9,94,-9,-30, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018803636776283383, 0.001896134577691555, 0.00190720334649086, 0.0021144794300198555, 0.0017222935566678643, 0.0017962224083021283, 0.0018769365269690752, 0.001730971853248775, 0.0017903316766023636, 0.0018216860480606556, 0.0018653250299394131, 0.0016969408607110381, 0.0018286288250237703, 0.0018212078139185905, 0.0017770909471437335, 0.0017958093667402864, 0.0017860571388155222, 0.0021662998478859663, 0.0017099567921832204, 0.0017774403095245361, 0.0017024307744577527, 0.0018413051730021834, 0.0017984507139772177, 0.0018208645051345229, 0.0018053457606583834, 0.0018783685518428683, 0.0018144923960790038, 0.0017555783269926906, 0.0021266043186187744, 0.0017750695114955306, 0.0022179041989147663, 0.0018621196504682302, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 2008, -113, 4254, 6304, 6137, -3471, 5744, -1970, -2597, -809, 6391, -3275, 5216, 8437, 2733, 2885, -875, -517, -2469, 7775, 2859, -1111, 2921, -806, -1631, 3688, 1999, 2661, 7225, 2380, 5491, 1731, 1473, 6973, 6487, 3924, -710, 4665, 3311, -5510, -328, 1739, -75, 2764, -1712, 504, -1711, 951, -8294, 2474, 1509, -4968, 9047, -1531, 2192, 2130, 1300, 3027, -945, -3143, 187, 2601, 351, 4886, 6861, 4893, 4069, 7193, 5918, -953, 4278, 6204, 4514, -2256, 7314, 8758, 988, -5668, 653, 1689, 12844, 2159, -888, -3405, 1546, 811, 1808, -2810, 3770, -573, 4760, 1630, -17, -4022, -316, 1871, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00010114887118106708, 0.0001950964069692418, 0.00013005360960960388, 0.00012172640708740801, 0.00010261749412165955, 0.00012075229460606351, 0.00010175535862799734, 0.00013488451077137142, 0.00015243144298437983, 0.00018402448040433228, 0.00010225739242741838, 0.00014106182788964361, 0.00010852642299141735, 6.7513879912439734e-05, 0.00011658012954285368, 0.00014079659013077617, 0.00018507143249735236, 0.00016256849630735815, 0.00012525040074251592, 8.066478039836511e-05, 0.00015255158359650522, 0.00011898348748218268, 0.00012640254863072187, 0.0001432308490620926, 0.00015120996977202594, 0.00016355160914827138, 0.00014870564336888492, 0.00012219672498758882, 0.00010012738493969664, 0.00018151930999010801, 9.6368559752590954e-05, 0.00013018926256336272, 0.00019261137640569359, 8.9069697423838079e-05, 9.3549599114339799e-05, 0.00012588599929586053, 0.00014946948795113713, 9.8807773611042649e-05, 0.00011460443784017116, 9.3396694865077734e-05, 0.00012730824528262019, 0.0001205016378662549, 0.00014382546942215413, 9.491554374108091e-05, 0.00014076677325647324, 0.0001277682458749041, 0.0001420775952283293, 0.00012766951113007963, 8.2981008745264262e-05, 0.00010506172111490741, 0.00017359890625812113, 0.00010380738240201026, 8.3328814071137458e-05, 0.00010814736015163362, 0.00015330269525293261, 0.00012035616236971691, 0.00014271104009822011, 0.00012657762272283435, 0.0001667104079388082, 9.947647777153179e-05, 0.00015770469326525927, 0.00010115312034031376, 0.00016541709192097187, 0.00013212168414611369, 0.0001003240467980504, 9.7217496659141034e-05, 9.5043636974878609e-05, 9.8069460364058614e-05, 0.00011444214032962918, 0.00013962073717266321, 0.00011443577386671677, 0.00010921519424300641, 0.00010282024595653638, 0.00010120155639015138, 9.5467126811854541e-05, 8.8484674051869661e-05, 0.00010319462307961658, 0.00011168103810632601, 0.00016902279458008707, 0.00012584778596647084, 6.4525942434556782e-05, 0.00013689063780475408, 0.00012435262033250183, 0.00012070259253960103, 0.00012722468818537891, 0.00012757946387864649, 0.00014987301256041974, 0.00014250708045437932, 0.00016105160466395319, 0.00017003421089611948, 0.0001277915871469304, 0.0001417494349880144, 0.00012654029706027359, 0.00011049926979467273, 0.00018146824731957167, 0.00012580827751662582, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -17,100,-87,41,59,-42,111,75,-68,9,39,-85,81,127,-77,18, 
  /* [1][0][][] */ -20,-2,-53,-30,-10,48,21,-127,31,-48,-19,-58,-7,-37,-50,5, 
  /* [2][0][][] */ -19,-24,32,71,20,51,-111,127,-22,-3,76,-63,-17,-62,-40,72, 
  /* [3][0][][] */ 84,-95,81,-1,1,-40,-25,127,-32,65,72,62,-14,52,1,6, 
  /* [4][0][][] */ -45,-17,-12,53,-102,8,-25,-127,1,-4,35,-6,25,41,107,109, 
  /* [5][0][][] */ 127,23,-25,-29,-82,25,18,73,20,-16,60,81,125,31,-77,5, 
  /* [6][0][][] */ 23,-31,-70,-54,-78,5,1,-52,-63,-65,-37,38,89,51,127,-12, 
  /* [7][0][][] */ -53,35,-29,-77,0,-56,-74,15,-97,53,-71,-68,-127,-35,18,91, 
  /* [8][0][][] */ 48,44,72,10,50,18,74,14,60,-24,42,9,-127,-30,-82,13, 
  /* [9][0][][] */ -33,57,31,-45,-29,-12,26,-15,-30,43,-43,5,48,127,29,27, 
  /* [10][0][][] */ 72,52,-43,62,-34,-24,58,-53,-74,-34,-54,-93,-127,-79,4,95, 
  /* [11][0][][] */ 53,10,63,10,-13,-28,16,105,-93,18,-34,11,-19,-8,61,127, 
  /* [12][0][][] */ -54,-22,12,7,25,-9,127,48,-62,32,6,-3,-14,69,-52,97, 
  /* [13][0][][] */ 37,53,20,58,120,55,122,125,-58,94,-100,-68,31,105,-127,-26, 
  /* [14][0][][] */ -127,119,7,-7,0,-5,68,5,-41,41,119,5,-101,14,-59,43, 
  /* [15][0][][] */ -12,-19,-127,-46,78,-43,-90,-35,-19,-19,-15,-72,-5,-80,-52,52, 
  /* [16][0][][] */ 118,-18,6,-16,28,-27,37,-29,-33,6,127,47,51,5,-31,25, 
  /* [17][0][][] */ 10,9,-20,-102,-8,-59,104,-127,6,-14,-43,27,41,75,13,46, 
  /* [18][0][][] */ 34,127,-15,-53,55,-72,-28,-60,-39,122,-30,-13,-28,59,-7,-23, 
  /* [19][0][][] */ -75,-116,119,-84,46,-127,33,-28,36,48,83,112,19,-20,59,-38, 
  /* [20][0][][] */ -21,94,55,7,13,-3,26,-20,53,-4,97,-19,-127,-34,-84,-10, 
  /* [21][0][][] */ -61,40,17,13,58,37,71,42,-127,54,-37,16,-22,22,-56,-17, 
  /* [22][0][][] */ 9,-84,49,18,24,-127,111,14,11,-45,-36,-63,35,-86,-61,-56, 
  /* [23][0][][] */ -51,-105,43,65,25,-18,21,-55,26,-41,76,0,15,76,87,127, 
  /* [24][0][][] */ 2,-1,23,74,46,20,-53,-127,63,11,-42,12,2,7,-19,-22, 
  /* [25][0][][] */ -6,32,20,-54,-33,-5,7,-40,-22,51,-49,-17,43,127,31,13, 
  /* [26][0][][] */ -74,83,8,24,33,-96,1,-28,11,28,10,84,3,-4,-92,127, 
  /* [27][0][][] */ -19,-127,-55,1,-64,100,-3,-59,16,-45,60,-34,30,-48,-106,-16, 
  /* [28][0][][] */ -40,1,39,87,30,5,-36,-127,-124,56,106,-7,71,5,-52,-30, 
  /* [29][0][][] */ -127,104,-18,-25,-24,17,-116,-72,-44,-29,-4,5,3,-64,-114,54, 
  /* [30][0][][] */ 57,81,-55,88,-118,-104,-73,-22,-41,-4,7,-110,127,29,-14,92, 
  /* [31][0][][] */ 127,29,-64,-40,-73,26,108,36,-61,-21,72,49,46,31,-24,13, 
  /* [32][0][][] */ -25,-16,127,-4,-25,79,69,13,-16,-18,-11,14,14,72,69,42, 
  /* [33][0][][] */ 1,28,-63,-57,-35,27,127,30,-6,-28,17,-75,103,114,-50,53, 
  /* [34][0][][] */ -81,-12,79,7,21,-43,103,-8,-127,25,30,-47,47,61,-46,-20, 
  /* [35][0][][] */ -4,19,-56,16,-70,115,-27,-12,-23,127,5,100,-74,60,14,31, 
  /* [36][0][][] */ -8,-71,127,-55,-57,22,-38,-11,13,18,-47,83,5,-89,-37,55, 
  /* [37][0][][] */ 75,-14,78,-29,107,-84,-44,28,-55,127,-61,5,-92,-50,104,-20, 
  /* [38][0][][] */ 53,51,17,-93,-16,-57,-102,51,-79,48,-109,-50,-72,-127,-97,62, 
  /* [39][0][][] */ -85,19,-62,-35,-83,-82,72,15,-127,-32,27,87,38,2,-3,59, 
  /* [40][0][][] */ 127,29,12,-110,-70,29,7,-36,-39,-15,-46,-98,22,68,46,30, 
  /* [41][0][][] */ 93,-75,-61,-52,-5,-4,-54,-25,55,-24,5,-59,127,-69,60,-28, 
  /* [42][0][][] */ -9,-91,-45,127,-2,-94,-113,9,14,4,-1,47,-81,71,-49,-2, 
  /* [43][0][][] */ -88,-49,-51,-127,-61,0,-7,83,46,-125,-35,32,-12,-51,-28,102, 
  /* [44][0][][] */ -27,52,27,-50,-24,-10,27,123,113,-88,76,89,127,57,-13,9, 
  /* [45][0][][] */ 37,78,-74,92,127,-91,-49,-72,121,-76,72,-75,-21,16,-69,69, 
  /* [46][0][][] */ -26,-39,10,-6,96,-30,35,25,-9,127,-22,-106,31,55,-54,65, 
  /* [47][0][][] */ 85,-40,-37,-16,83,-12,-43,-64,-5,127,-29,32,-3,-103,-79,17, 
  /* [48][0][][] */ 0,19,-16,-127,-2,-45,113,-122,12,6,-30,44,51,70,3,36, 
  /* [49][0][][] */ -27,127,-71,47,50,-58,74,55,-24,33,47,-80,-36,71,115,-99, 
  /* [50][0][][] */ 8,40,-18,7,-127,-4,-65,-53,56,75,31,35,-41,-43,-4,33, 
  /* [51][0][][] */ 127,-32,-49,-13,-42,86,-87,-41,40,-15,-43,64,-30,-61,5,37, 
  /* [52][0][][] */ -32,-57,59,83,-53,-127,-125,-9,-51,-53,-34,-64,12,-82,-2,82, 
  /* [53][0][][] */ 30,105,67,-124,1,109,106,-17,-16,-35,-11,-37,89,-127,5,62, 
  /* [54][0][][] */ 40,127,8,-24,-5,-93,-114,54,12,-22,-39,122,91,98,27,66, 
  /* [55][0][][] */ -53,-21,63,37,59,-47,117,94,-86,0,25,24,127,43,-19,-7, 
  /* [56][0][][] */ 127,16,24,23,-47,108,-52,-76,-25,47,-82,1,-57,108,-6,37, 
  /* [57][0][][] */ -45,-31,-45,-28,-70,-97,71,-24,-127,-24,61,61,16,35,-10,51, 
  /* [58][0][][] */ 43,-53,65,25,6,-65,-11,10,21,-13,-127,-20,21,-42,-42,40, 
  /* [59][0][][] */ 76,16,-127,92,4,36,96,-32,-78,-54,32,-104,-114,-66,29,122, 
  /* [60][0][][] */ 4,36,-16,17,-21,-22,-21,3,-42,-85,63,122,-43,-127,-30,-1, 
  /* [61][0][][] */ -37,18,75,-94,-70,52,12,127,-27,-102,61,83,88,-7,5,125, 
  /* [62][0][][] */ 79,46,-13,-127,-14,5,10,-37,-13,32,-35,46,26,-18,-85,-70, 
  /* [63][0][][] */ 1,-24,1,-3,-63,-70,-50,10,-77,-12,-32,-15,127,3,49,-14, 
  /* [64][0][][] */ 18,4,-8,61,-95,-50,-9,-72,47,127,37,14,25,-57,-51,99, 
  /* [65][0][][] */ -31,10,-24,-10,-75,70,31,-22,45,-112,96,-57,72,57,-127,58, 
  /* [66][0][][] */ -124,109,-104,-100,32,-30,-127,-84,-107,112,91,-12,-122,-52,59,71, 
  /* [67][0][][] */ 4,-30,-127,-113,65,74,13,-28,-29,-3,51,-19,25,40,19,50, 
  /* [68][0][][] */ 49,19,-10,-42,-63,32,19,36,-62,77,127,-8,-18,-53,-126,-7, 
  /* [69][0][][] */ 67,-97,53,-41,23,-111,-24,127,-9,70,78,87,-21,65,-35,-9, 
  /* [70][0][][] */ 40,3,117,48,93,-32,127,19,31,31,-60,52,-74,51,-89,32, 
  /* [71][0][][] */ 14,35,92,-80,-127,-74,11,10,-28,-16,20,-110,-71,7,17,36, 
  /* [72][0][][] */ -65,-98,26,-127,76,-21,15,45,-74,18,-122,-12,59,117,-64,124, 
  /* [73][0][][] */ 16,15,57,1,127,-100,-49,13,-34,104,-85,40,-92,-62,118,-24, 
  /* [74][0][][] */ -96,9,-124,-76,57,-39,-47,23,-84,-4,-127,-47,-25,-56,-29,86, 
  /* [75][0][][] */ 97,-20,48,-47,18,6,-127,-24,-12,-103,69,2,2,-12,-6,-6, 
  /* [76][0][][] */ 6,-54,-27,99,31,92,92,-61,86,-127,70,102,48,-79,-58,46, 
  /* [77][0][][] */ -35,-30,127,-29,37,-23,-27,-112,9,16,39,84,44,54,22,7, 
  /* [78][0][][] */ -57,2,23,-33,-2,-56,37,-3,22,-8,20,-82,-100,-70,-127,-53, 
  /* [79][0][][] */ -120,-70,-18,28,127,24,-11,31,13,39,-12,69,-42,-89,-85,-22, 
  /* [80][0][][] */ 13,-120,55,127,-47,-27,-121,85,-8,16,75,-6,-82,-3,-13,83, 
  /* [81][0][][] */ 105,60,-17,92,3,30,33,127,17,22,119,69,107,21,53,-25, 
  /* [82][0][][] */ -50,7,19,-36,35,-127,-120,-86,0,78,-46,-38,-28,108,-72,-24, 
  /* [83][0][][] */ 104,-30,89,-29,-34,-13,-127,-5,24,-110,19,-50,-16,-7,11,-24, 
  /* [84][0][][] */ 17,-69,-98,21,127,46,41,31,-119,15,-112,-33,56,-31,-65,21, 
  /* [85][0][][] */ 19,95,39,-58,96,8,43,-115,127,-46,41,-23,105,-78,16,8, 
  /* [86][0][][] */ 111,-38,127,50,0,-61,81,39,-64,-52,-90,-41,34,13,-69,11, 
  /* [87][0][][] */ -3,8,19,-80,72,-26,-44,15,38,-40,76,-38,-81,-127,-2,24, 
  /* [88][0][][] */ -53,-28,34,-5,18,32,-64,-49,-4,7,-73,-127,-45,-36,-12,-13, 
  /* [89][0][][] */ -71,15,26,-72,28,9,-127,19,89,20,-68,-14,-13,-79,-43,-17, 
  /* [90][0][][] */ -17,-18,-30,-77,127,14,-56,42,42,63,32,-6,27,12,-78,-24, 
  /* [91][0][][] */ -46,-70,29,48,-44,2,-20,74,-34,-54,29,-65,8,71,31,127, 
  /* [92][0][][] */ -20,87,-5,-15,-19,64,-99,49,-43,-9,64,8,-36,127,49,20, 
  /* [93][0][][] */ -7,77,-50,-75,69,90,-87,5,66,61,79,54,-127,30,-40,82, 
  /* [94][0][][] */ 23,65,108,16,-127,-45,21,-9,16,-16,31,-12,-53,-28,11,-21, 
  /* [95][0][][] */ 5,40,52,-10,127,-17,-105,76,18,9,-93,94,-2,14,119,-32, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0014549168990924954, 0.0028062502387911081, 0.0018706802511587739, 0.0017509023891761899, 0.0014760413905605674, 0.0017368908738717437, 0.0014636404812335968, 0.0019401675090193748, 0.0021925610490143299, 0.0026469926815479994, 0.0014708617236465216, 0.0020290215034037828, 0.0015610349364578724, 0.00097111391369253397, 0.0016768787754699588, 0.0020252063404768705, 0.002662051934748888, 0.0023383714724332094, 0.0018015912501141429, 0.0011602754238992929, 0.0021942891180515289, 0.0017114484217017889, 0.001818163669668138, 0.0020602205768227577, 0.0021749914158135653, 0.0023525126744061708, 0.0021389694884419441, 0.0017576673999428749, 0.0014402238884940743, 0.0026109584141522646, 0.0013861572369933128, 0.0018726314883679152, 0.0027705058455467224, 0.0012811709893867373, 0.0013456095475703478, 0.0018107336945831776, 0.0021499565336853266, 0.0014212427195161581, 0.0016484606312587857, 0.0013434102293103933, 0.0018311911262571812, 0.0017332853749394417, 0.002068773377686739, 0.0013652571942657232, 0.0020247774664312601, 0.001837807591073215, 0.0020436320919543505, 0.0018363874405622482, 0.0011935918591916561, 0.0015111989341676235, 0.0024970320519059896, 0.0014931566547602415, 0.0011985946912318468, 0.0015555825084447861, 0.0022050931584089994, 0.0017311929259449244, 0.002052743686363101, 0.0018206819659098983, 0.0023979484103620052, 0.0014308613026514649, 0.002268410986289382, 0.0014549780171364546, 0.0023793454747647047, 0.0019004271598532796, 0.001443052664399147, 0.0013983682729303837, 0.0013670996995642781, 0.0014106228481978178, 0.0016461261548101902, 0.0020082928240299225, 0.0016460345359519124, 0.0015709421131759882, 0.0014789577107876539, 0.001455674646422267, 0.0013731911312788725, 0.001272756140679121, 0.0014843427343294024, 0.0016064106021076441, 0.0024312096647918224, 0.001810183865018189, 0.00092813570518046618, 0.0019690233748406172, 0.0017886775312945247, 0.0017361759673804045, 0.0018299891380593181, 0.0018350923201069236, 0.0021557607688009739, 0.0020498097874224186, 0.0023165526799857616, 0.0024457578547298908, 0.0018381434492766857, 0.0020389119163155556, 0.0018201450584456325, 0.0015894122188910842, 0.0026102240663021803, 0.0018096157582476735, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 10612, 16979, -2715, 3575, 251, 5024, 1722, 5767, 19620, -4118, -10079, 10023, -16296, 14405, 4066, 9894, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.7741847083671018e-05, 5.7873508922057226e-05, 4.7399338654940948e-05, 6.1811137129552662e-05, 6.2332357629202306e-05, 6.6973792854696512e-05, 4.5024353312328458e-05, 4.7393030399689451e-05, 9.1097426775377244e-05, 6.0032802139176056e-05, 4.4111562601756305e-05, 4.5236156438477337e-05, 6.3293504354078323e-05, 5.4499429097631946e-05, 7.3159935709554702e-05, 5.9659392718458548e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -96,33,52,-17,-73,-11,-68,8,-51,16,-9,-21,39,44,37,-43,10,-4,88,10,14,-64,116,65,40,28,14,37,-56,-127,-97,10,-41,-42,29,19,5,30,-1,34,-6,10,-80,-2,-70,-23,4,91,-8,25,-34,-10,-8,5,31,-54,-100,9,-21,89,49,34,0,14,-33,-58,-41,27,-63,-55,17,-28,8,-4,-75,-43,-46,8,-47,3,-51,80,96,-83,14,50,13,51,36,-12,-2,-27,-28,-36,-50,15, 
  /* [1][0][][] */ 47,19,19,-51,-76,-17,-11,22,-22,32,54,-55,16,-8,-65,-37,-14,-6,-76,23,-5,-92,8,47,-4,-64,8,-50,77,-118,107,-79,63,30,-20,56,38,82,-7,-45,36,29,-15,-20,5,66,-127,-48,-47,-46,-4,-31,44,-48,-43,46,14,9,-41,24,22,61,-4,-96,-19,-19,-60,-14,-5,-10,-87,-22,-44,-28,20,-72,1,20,26,-73,-23,-20,-82,-40,39,-34,-24,28,-76,-4,-59,47,31,62,-49,61, 
  /* [2][0][][] */ 78,-36,32,15,27,-90,67,-6,-6,-16,-14,-17,-89,-34,7,-34,-94,-46,-34,58,3,-43,-48,35,-3,-81,0,-34,-40,56,-52,125,-65,127,-32,21,-10,-25,-20,-14,-108,73,83,27,-65,8,-28,-21,29,-9,-48,-62,54,-19,-27,66,37,-10,60,-12,16,40,-40,2,78,18,-5,-10,40,43,-50,10,48,55,65,34,39,-80,86,55,83,-26,-55,38,-65,29,22,66,11,3,-26,31,-59,51,-26,36, 
  /* [3][0][][] */ -3,-4,-16,8,11,-10,1,-55,-30,56,37,52,31,-11,-55,41,9,-31,30,7,17,127,32,-48,13,24,-22,0,63,-32,64,-16,-18,37,-30,-29,24,46,37,10,-74,-39,-43,28,-31,33,24,-4,-23,-52,-7,-29,53,-76,-36,-45,9,87,-24,-4,-4,-12,-40,1,22,50,-39,0,-23,-8,11,-70,-36,-49,29,-12,14,-7,-26,-29,-38,-14,-58,15,-13,-41,27,-23,-1,22,29,-18,45,23,-35,59, 
  /* [4][0][][] */ 21,9,-33,14,27,21,-37,1,-29,71,86,-21,-17,0,7,-53,14,-12,-30,50,12,-39,54,79,-73,-3,-127,13,-46,-61,12,18,-59,-52,14,52,8,31,17,26,-33,-47,52,-22,1,6,-36,55,-45,50,4,15,34,-15,-74,22,44,-24,19,-11,45,-7,21,3,-41,18,-34,6,-42,29,-42,57,44,-53,-41,-41,32,-51,-1,11,-48,83,-79,6,-28,22,31,-57,50,6,30,8,-60,-26,28,24, 
  /* [5][0][][] */ -63,34,35,-3,39,-12,53,-30,-13,36,-6,-22,42,-15,-15,-43,-13,-37,43,15,-110,-32,-72,39,-38,-2,55,18,45,-80,-21,46,57,115,-7,38,-6,25,47,-22,-23,103,67,-36,-2,65,49,4,12,26,-10,35,14,-33,31,-90,46,-43,-70,-54,51,94,-43,-9,71,-44,-70,-58,-64,-16,-54,-17,-14,8,-22,-40,21,-34,-45,-16,127,-14,33,-95,-75,37,26,-6,-41,43,24,-3,-8,35,17,90, 
  /* [6][0][][] */ 33,-10,-72,21,-26,-117,102,76,-54,61,-14,68,-125,-85,51,60,6,-47,4,13,-11,0,-67,-54,-59,34,66,21,30,40,98,-56,20,10,14,-79,14,-2,26,74,0,6,-48,-16,10,-64,-85,20,24,-127,-36,65,30,7,-24,-65,62,35,22,-10,-100,44,-98,-6,32,4,-3,52,49,20,0,-38,-39,28,88,27,64,-24,55,-69,-16,-62,-84,76,-1,-67,51,8,-44,51,37,45,-32,8,-38,112, 
  /* [7][0][][] */ 25,81,-32,-52,-16,-18,37,1,-52,29,-49,-57,-46,13,6,-7,-39,-40,-27,62,-15,127,8,34,-12,1,14,21,48,47,80,-29,67,23,-19,5,3,-15,-3,31,-67,-14,19,-46,21,-47,63,-27,29,-80,-90,-32,-50,2,1,-11,22,8,-89,1,-1,110,11,-31,-17,-1,-47,13,-29,-16,-95,41,11,71,-37,43,-46,52,16,-75,-23,-57,48,-66,37,-27,-3,-8,-9,66,-80,47,45,-31,-48,9, 
  /* [8][0][][] */ 1,80,-53,45,-42,-26,-81,35,-95,-28,2,-2,-40,38,34,83,-2,-51,-3,3,34,-15,6,-13,-38,79,5,31,-8,-29,-49,-28,-25,-53,-31,-67,-46,30,47,4,-1,-31,27,5,-43,-35,13,-14,-12,-14,59,76,-1,-20,-68,98,-31,36,-11,-33,-41,14,19,59,-33,-62,-40,-9,-48,17,1,-2,-18,-55,-117,-11,-52,26,-73,-41,-28,8,-35,-42,4,0,20,29,15,67,-61,-16,-85,-127,28,-53, 
  /* [9][0][][] */ -22,21,-60,39,-25,-37,71,40,-8,40,-21,90,-32,-22,20,127,17,13,77,24,8,26,32,-83,-34,-9,16,-15,6,-8,44,45,-24,-6,-2,-114,24,-23,-24,-16,-17,11,45,-17,-1,0,9,15,24,72,14,-15,-53,-78,-5,3,-5,-15,75,-24,-55,50,-62,-32,82,-12,-23,4,-59,20,36,43,-10,89,-25,-25,-25,17,-31,-10,44,-36,51,5,20,-19,-8,-39,-57,14,3,4,55,29,-49,-1, 
  /* [10][0][][] */ 65,0,-36,-14,-28,-33,77,-11,12,-31,-25,-16,-103,-21,2,-2,-70,-28,32,29,36,50,23,8,-50,82,34,-10,-57,-71,-26,-17,79,-41,50,10,77,-98,85,127,16,-72,16,13,-13,-96,-15,63,23,79,-84,-50,-25,27,15,55,14,-72,92,47,-3,47,-71,-28,-5,-63,20,57,29,-39,-13,54,125,44,19,-93,34,-45,70,-12,-56,24,26,33,-44,-12,8,36,-48,-21,28,61,47,67,-39,7, 
  /* [11][0][][] */ -64,-40,46,-75,24,-10,-36,-58,44,-53,-4,-10,-17,3,17,9,-65,-6,64,10,-58,35,-75,-92,11,25,-60,44,28,-58,36,-40,30,-9,23,-17,-73,12,-116,9,-64,54,-39,54,27,14,-5,-38,13,-44,-75,-57,25,32,83,-63,-24,-72,14,-51,-28,-52,-33,-127,5,-67,67,78,114,9,68,-17,-30,-12,64,-37,102,44,29,56,22,-12,-26,93,84,9,-14,-24,-77,-69,-18,23,62,44,51,74, 
  /* [12][0][][] */ 36,-25,1,-47,46,113,-10,27,54,63,4,65,16,47,9,3,-60,55,23,59,127,7,68,-70,31,20,-78,-78,-24,91,6,6,37,-16,11,-38,51,-10,-39,-38,20,-28,49,63,-20,36,-5,-8,-74,24,-6,18,-32,-32,10,19,-45,57,17,45,35,-97,11,-109,-5,94,-22,-39,1,-50,70,16,-11,22,-17,41,-15,56,-74,-12,-25,25,121,23,-13,77,-25,-77,75,7,-81,64,69,4,-24,-98, 
  /* [13][0][][] */ -14,39,-15,-41,-27,-13,7,-44,24,-29,-21,-67,58,-105,-48,-70,-9,-32,-80,-12,-102,-27,14,106,-29,2,111,1,22,-29,62,43,17,-10,-127,123,-29,-62,24,-55,110,9,-3,31,2,-96,52,-32,75,-7,-49,20,19,-13,-9,75,64,-58,-39,-14,54,35,5,-92,-1,32,-46,30,-63,-35,-75,5,-70,22,-48,-89,-115,20,36,87,-16,57,32,-89,48,40,38,-16,-21,-15,-3,26,-66,13,-31,-6, 
  /* [14][0][][] */ 4,24,-91,-19,78,99,-98,6,32,-43,84,-3,24,-22,-38,-75,-80,11,28,127,14,-37,-1,8,5,48,-23,78,20,-13,-34,12,69,1,-42,7,-18,68,78,13,64,13,19,-5,-17,-45,70,-41,38,2,-1,-19,50,17,-37,27,19,70,-111,-3,-22,-64,-38,-98,5,-44,-51,-4,-90,60,-20,21,1,-40,-20,-35,35,-15,-66,-32,39,14,10,-27,-8,50,-19,-12,-32,75,71,16,8,-40,-41,-66, 
  /* [15][0][][] */ -80,-38,48,-65,17,-29,-37,-90,-11,9,-3,66,-7,-26,27,94,-104,-18,25,-62,31,-20,-10,-81,54,-12,46,-58,-66,-95,-59,33,-33,58,81,-98,-10,-40,21,-21,-26,-10,32,-12,3,-3,64,108,-53,-14,15,-47,-51,55,16,-49,-99,-20,117,9,-21,9,-100,24,-64,-5,6,28,61,-72,87,-16,60,-31,-39,-50,20,26,58,6,-23,70,50,41,-4,-17,-127,11,-9,-53,-89,32,40,-37,-30,56, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.002333478769287467, 0.0028286841697990894, 0.0023167380131781101, 0.0030211438424885273, 0.0030466194730252028, 0.0032734787091612816, 0.002200655872002244, 0.0023164297454059124, 0.0044525698758661747, 0.002934223972260952, 0.0021560413297265768, 0.002211008220911026, 0.0030935972463339567, 0.002663769293576479, 0.003575839102268219, 0.0029159728437662125, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 173, -1318, -3399, -5200, 1472, 5536, -1300, 595, -23, -999, 10220, -2161, -142, 11739, 8568, -5967, 15293, 2482, -4961, 240, 601, -4314, 1816, -917, 492, -3877, -3024, -5157, 169, -8435, -582, 1199, 14158, 968, -1172, -317, -1956, -1931, -1491, 6980, -996, -1000, 1873, -6708, 14597, 16193, -2321, 17681, -293, 15709, 16480, -4682, -1289, -1399, -459, 12243, -537, 150, 17494, 5988, 10004, 12954, 10025, -8312, 1444, 251, -2611, 5882, -1042, -2099, 203, 2801, 11364, -720, -473, 12147, -749, 1659, 10380, 3013, -1444, 19558, -2594, 430, 21535, 5308, -4339, -3719, 1060, -6173, 13340, -246, -543, 621, -5631, -4552, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00017666471831034869, 0.00019003741908818483, 0.00013050006236881018, 0.00014522178389597684, 0.00025518296752125025, 0.00026144529692828655, 0.00021470700448844582, 0.00017424981342628598, 0.0002409161243122071, 0.00014335574815049767, 0.00010851638944586739, 0.00038002466317266226, 0.00026617999537847936, 0.00012581379269249737, 0.00013550512085203081, 0.00013385548663791269, 0.00010732632654253393, 0.00021492665109690279, 0.00016144670371431857, 0.00013362968456931412, 0.00016707625763956457, 0.00025462830672040582, 0.00023336855520028621, 0.0001561182871228084, 0.00054586894111707807, 0.0002034250064752996, 0.00023115378280635923, 0.00012787508603651077, 0.00016641883121337742, 9.7961798019241542e-05, 0.00026808833354152739, 0.00018575145804788917, 0.00013199388922657818, 0.00015260450891219079, 0.00027659162878990173, 0.00029990423354320228, 0.00013017414312344044, 0.00031090661650523543, 0.00025530706625431776, 0.00011560133862076327, 0.00016317157133016735, 0.00018119506421498954, 0.00020236025738995522, 0.00010896525054704398, 9.1473106294870377e-05, 0.00010459280019858852, 0.00023246041382662952, 8.4635008533950895e-05, 0.00014870369341224432, 0.00010236675734631717, 0.00010150620073545724, 0.00010595203639240935, 0.00016644105198793113, 0.00015542477194685489, 0.00018278052448295057, 0.00012447817425709218, 0.00016518242773599923, 0.00018558365991339087, 0.00014257620205171406, 0.00012413717922754586, 0.00014041864778846502, 0.00016805947234388441, 0.0001474958990002051, 0.00010541163646848872, 0.00013615730858873576, 0.00022289958724286407, 0.0002087516913888976, 0.00014677279978059232, 0.000230751684284769, 0.00019607497961260378, 0.0002727679384406656, 0.000166086814715527, 0.00015211341087706387, 0.00018960965098813176, 0.00020384142408147454, 0.00011374746100045741, 0.00015194903244264424, 0.00017287388618569821, 0.00014423193351831287, 0.000186446777661331, 0.00021179368195589632, 8.1071892054751515e-05, 0.00024179244064725935, 0.00016509287524968386, 7.2046743298415095e-05, 0.00014220054436009377, 0.00014043223927728832, 0.0001967778371181339, 0.00020909687737002969, 0.00016574472829233855, 0.00010753631067927927, 0.0002713396679610014, 0.00019686389714479446, 0.00020051872706972063, 0.00010771604866022244, 0.00024704652605578303, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 20,127,-4,11,-40,-4,48,40,53,-70,-101,25,-23,-18,26,-51,-104,18,10,10,29,73,66,86,13,1,-38,2,-23,19,27,-29,-51,7,-34,104,8,38,7,5,32,-29,-4,37,-97,-52,14,-35,-29,-81,-56,2,25,60,-20,-5,-81,-66,-56,-127,-127,0,-106,7,-28,45,55,-29,-29,37,36,-19,-29,3,38,3,11,-44,-86,16,7,-78,59,-13,-93,-69,-10,21,-121,6,-88,44,79,-17,62,12, -39,-24,-3,73,-16,85,-19,-4,57,16,-127,58,-29,-55,-64,127,-125,63,44,77,119,19,97,127,20,12,22,43,0,127,-10,-127,92,77,3,28,86,87,-25,-127,127,6,91,127,-42,-74,127,-79,-10,-112,-91,-32,26,127,-22,-127,1,33,-100,-74,-41,-127,-40,87,-36,88,120,-42,3,127,127,-23,-54,31,-41,-105,34,-64,-18,127,-4,-80,127,-49,-105,-63,95,69,99,122,-77,8,127,-39,127,43, 14,-107,-6,0,-23,-21,-6,43,21,43,-80,-1,-21,32,6,-83,-28,13,3,8,25,64,48,85,17,-35,35,50,-3,25,-1,-65,-48,-77,-38,72,9,8,24,18,-6,40,-21,57,-33,-34,5,-6,22,-55,3,13,8,0,7,4,44,-78,-22,-71,-82,20,-83,-3,35,21,-68,-16,-30,-7,4,-7,-16,-38,-14,16,-6,-25,-97,-4,4,-90,37,3,-21,-50,-4,-16,-86,-9,-27,38,22,31,22,-4, 
  /* [0][1][][] */ 86,4,57,119,-4,-60,127,33,-31,-127,-110,127,-6,-127,-61,38,-65,-49,69,12,-122,7,-127,-110,-12,60,-113,127,-91,72,127,58,32,46,9,127,-127,71,-14,-43,73,-127,20,78,-127,-73,14,-127,-126,-104,-127,33,127,-60,80,-19,-127,2,-71,5,-71,-70,-42,45,-114,-16,117,-113,-53,28,-39,-127,-127,61,127,-96,89,69,-93,-68,127,-119,-24,105,-36,-28,2,79,-12,11,-71,34,-16,-92,84,-11, -127,13,-47,127,-92,-127,-117,-127,70,6,-45,43,-73,-108,-41,114,-127,-127,127,127,28,-127,-102,118,-127,127,17,65,-77,-34,-116,59,-127,75,127,-43,31,127,127,-99,-45,31,20,40,-60,-127,-55,-107,-3,-127,-67,127,46,80,61,-83,21,25,81,-21,-55,-49,-127,127,-17,-127,127,127,19,58,-90,-78,-15,63,-113,-127,127,127,84,-75,-75,-11,-86,66,-101,-127,127,127,127,127,-127,-127,-112,-63,95,127, 46,-12,87,62,-1,-38,13,24,-50,85,-75,52,7,-20,-127,90,32,-33,18,-14,-127,18,-84,-113,-8,16,127,5,127,104,25,-112,-30,-127,-15,121,-119,9,-25,-26,-9,111,17,103,-21,-27,1,-79,127,-83,-98,11,76,-79,-127,29,87,-7,-127,76,-8,-52,-4,48,127,-34,-45,-23,-67,-9,-40,-61,-126,-127,-9,-48,-15,-37,-127,-60,-61,-127,-13,127,-127,6,-1,-6,-28,-22,-16,46,-25,127,28,-8, 
  /* [0][2][][] */ 34,-108,37,-11,3,6,34,41,-37,-42,24,-18,8,-11,-11,42,-10,17,-2,21,0,54,-1,-60,28,41,0,5,-28,10,-2,12,-43,-20,-26,2,57,-3,8,-31,12,14,-19,-26,-18,-45,-3,-12,-16,16,-45,35,-7,3,-30,-12,-6,-5,-16,33,-57,2,38,-10,-37,48,-65,-43,17,2,22,92,-6,27,21,-3,-34,-40,-1,-16,19,-20,-11,-26,-87,23,-32,-20,-89,38,1,29,-9,0,11,-14, -42,22,127,-15,127,58,-35,3,-127,23,-48,-31,127,-14,-54,38,19,44,1,-45,30,22,48,9,75,-65,-1,33,-8,108,-25,7,-112,17,8,-39,88,40,27,-109,-17,-4,-127,15,-22,-23,-22,-75,-6,-70,-55,85,120,-60,-26,-83,-9,127,-46,16,44,-86,85,61,-34,12,-80,-2,127,-17,17,111,-55,29,-18,-61,-3,-96,-17,-66,-2,-79,-27,-56,-90,124,26,-15,93,47,52,33,-24,-16,1,-9, 6,80,19,-32,-6,-15,-12,31,0,72,40,-1,8,-7,-10,67,-13,8,-8,18,-23,50,-9,-63,16,39,19,37,14,7,-17,-76,-66,-27,-16,-14,52,-23,7,-12,-1,-13,-4,3,-40,-31,-7,-20,12,26,-29,19,-12,-6,6,7,3,-1,-12,66,-51,11,19,-19,36,17,-95,2,6,-5,11,74,27,-9,-11,-1,-15,-19,-13,-5,-5,-78,-7,1,-71,19,-17,-19,-77,36,7,21,-11,9,3,-8, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0086669158190488815, 0.0093229608610272408, 0.0064021442085504532, 0.0071243708953261375, 0.012518906965851784, 0.012826128862798214, 0.01053321547806263, 0.0085484441369771957, 0.011818996630609035, 0.0070328256115317345, 0.0053236573003232479, 0.018643461167812347, 0.013058405369520187, 0.0061722425743937492, 0.0066476850770413876, 0.0065667564049363136, 0.0052652745507657528, 0.010543990880250931, 0.0079203415662050247, 0.0065556787885725498, 0.0081965196877717972, 0.012491696514189243, 0.011448724195361137, 0.0076589374803006649, 0.026779539883136749, 0.0099797369912266731, 0.011340070515871048, 0.0062733665108680725, 0.0081642670556902885, 0.0048058643005788326, 0.013152026571333408, 0.0091126980260014534, 0.0064754295162856579, 0.0074865561909973621, 0.013569185510277748, 0.014712867327034473, 0.0063861552625894547, 0.015252629294991493, 0.01252499595284462, 0.0056712343357503414, 0.0080049615353345871, 0.0088891675695776939, 0.0099275019019842148, 0.0053456774912774563, 0.0044875382445752621, 0.0051311715506017208, 0.011404171586036682, 0.0041520711965858936, 0.0072951884940266609, 0.0050219651311635971, 0.0049797473475337029, 0.0051978537812829018, 0.0081653576344251633, 0.0076249144040048122, 0.0089669479057192802, 0.0061067189089953899, 0.008103610947728157, 0.0091044660657644272, 0.0069945822469890118, 0.0060899904929101467, 0.0068887355737388134, 0.008244754746556282, 0.0072359354235231876, 0.0051713422872126102, 0.0066796806640923023, 0.010935131460428238, 0.010241055861115456, 0.0072004613466560841, 0.011320344172418118, 0.0096191549673676491, 0.013381600379943848, 0.0081479791551828384, 0.0074624642729759216, 0.0093019753694534302, 0.010000165551900864, 0.0055802860297262669, 0.0074543994851410389, 0.0084809428080916405, 0.0070758098736405373, 0.0091468095779418945, 0.010390291921794415, 0.0039772698655724525, 0.011861987411975861, 0.0080992178991436958, 0.0035345088690519333, 0.0069761532358825207, 0.0068894024007022381, 0.0096536362543702126, 0.010257990099489689, 0.0081311967223882675, 0.0052755759097635746, 0.013311531394720078, 0.0096578579396009445, 0.0098371589556336403, 0.005284393671900034, 0.012119745835661888, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7170, 4447, 1263, -1091, 7427, 8420, 10514, 2350, -563, 14866, 1716, -5546, 4476, 4010, 318, -960, 3991, 11059, -950, -57, 5561, 18523, 11639, -2192, -4413, -1224, 18109, -126, 2119, 1274, 10611, -1841, 13703, 2519, 5832, -5029, 884, -6618, 164, 2344, 3215, 1709, 2144, -460, 1207, 2681, 5514, 4330, 3752, 3302, 7239, 3273, -2563, 2528, 1747, 2950, 2289, 3859, 10193, 1639, -1020, 6663, 4541, 4698, 5876, 10259, -6013, 3366, 7934, -821, 8988, 2071, 3595, 4541, 4810, 2142, -607, 2493, 4143, 4915, 3879, 3877, 11574, 1027, 3159, 5138, 861, -996, 23613, -485, 1068, -1681, 14474, 3863, -109, -1099, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00010258152906317264, 8.4497580246534199e-05, 0.00011989050835836679, 0.00016606293502263725, 9.6661533461883664e-05, 9.9572156614158303e-05, 7.5895222835242748e-05, 0.00012098823935957626, 0.00010407504305476323, 5.3818159358343109e-05, 0.00012876752589363605, 8.744395017856732e-05, 0.00011529443872859702, 0.0001212768693221733, 0.00013748010678682476, 0.0001103428439819254, 0.00014863978140056133, 6.7667911935131997e-05, 8.759507181821391e-05, 0.00012493196118157357, 0.00010717347322497517, 4.7679459385108203e-05, 7.4108887929469347e-05, 0.00011651362729026005, 0.00012128477828809991, 0.00011795396858360618, 4.8378151404904202e-05, 0.0001116046478273347, 0.00013394374400377274, 0.00012848959886468947, 7.5950112659484148e-05, 0.00013858644524589181, 5.9728899941546842e-05, 0.00018006649042945355, 0.00011534753139130771, 0.0001139543455792591, 0.00011941744742216542, 8.7101747340057045e-05, 0.00011603935854509473, 0.00012729818990919739, 0.00013720174320042133, 0.00014530507905874401, 0.00017183569434564561, 0.00019613953190855682, 0.00019965188403148204, 0.00014829314022790641, 9.8798496765084565e-05, 0.00014053673658054322, 0.00015634213923476636, 0.00014631521480623633, 0.00010087693954119459, 0.00012800672266166657, 0.00015337129298131913, 0.00013098408817313612, 0.00013478010077960789, 0.00013050029519945383, 0.00014511810149997473, 9.7376861958764493e-05, 7.9377321526408195e-05, 0.0001338718575425446, 0.0001703058514976874, 0.00010712198854889721, 0.00012843259901273996, 0.00012434289965312928, 9.5967647212091833e-05, 7.4037205195054412e-05, 9.8456104751676321e-05, 0.0001208987450809218, 8.1155332736670971e-05, 0.00015498050197493285, 8.0636396887712181e-05, 9.2194517492316663e-05, 0.0001153623015852645, 9.3059279606677592e-05, 0.00011540814739419147, 0.00012087995128240436, 0.00014987388567533344, 0.00015290865849237889, 9.8090800747741014e-05, 0.00011339640332153067, 0.00011201840243302286, 0.00011017611541319638, 6.6292093833908439e-05, 0.00010875369480345398, 0.00010843825293704867, 0.00013969241990707815, 0.00015064672334119678, 0.00021958470460958779, 4.0740844269748777e-05, 0.00015423749573528767, 0.00017550507618580014, 0.00013057458272669464, 6.085815402911976e-05, 0.0001077820488717407, 0.0001584244892001152, 0.0001082161397789605, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -66,48,-6,-26,-36,-74,-68,-25,69,-41,51,-52,74,-113,19,-127, 
  /* [1][0][][] */ -99,53,-96,-103,-67,20,-8,54,-36,6,82,-62,50,127,22,41, 
  /* [2][0][][] */ -53,-13,-77,1,-6,-51,31,-43,-99,127,79,6,44,69,-53,123, 
  /* [3][0][][] */ -61,-73,7,-36,-83,4,-49,-108,-9,24,43,-79,-66,-41,-127,-46, 
  /* [4][0][][] */ 71,-5,-17,39,-56,-5,-127,47,24,82,11,58,1,16,-59,-92, 
  /* [5][0][][] */ -82,62,-90,-27,46,-42,1,-63,74,-18,3,-34,-5,-90,-127,-80, 
  /* [6][0][][] */ -5,-30,-45,18,-84,80,54,-44,-29,-57,127,-17,-14,7,-124,19, 
  /* [7][0][][] */ -33,127,126,-87,67,97,1,-61,29,70,-94,-19,59,13,22,82, 
  /* [8][0][][] */ -46,0,43,-18,67,11,98,127,-81,-29,-77,-85,44,100,-79,-75, 
  /* [9][0][][] */ 46,69,107,34,-123,-45,-111,-106,64,9,127,12,-55,-118,58,-23, 
  /* [10][0][][] */ -19,-114,3,-71,-112,71,40,33,-25,-45,-3,46,-15,59,-127,18, 
  /* [11][0][][] */ 102,-64,-22,94,-99,-27,70,8,127,120,-38,36,23,-71,-30,111, 
  /* [12][0][][] */ -75,-60,127,-27,56,-9,34,47,63,-33,90,78,-36,31,-91,33, 
  /* [13][0][][] */ -7,-35,16,31,17,9,127,35,-92,19,6,18,-22,101,81,-75, 
  /* [14][0][][] */ 127,-81,111,-7,61,64,94,45,80,48,43,29,67,-44,51,-38, 
  /* [15][0][][] */ 3,118,-5,-38,48,127,-73,61,-40,-15,-35,0,-47,111,-41,-53, 
  /* [16][0][][] */ -42,63,100,-43,29,84,9,-2,-6,15,-11,46,89,4,79,127, 
  /* [17][0][][] */ 11,106,79,-127,39,-49,13,-73,-56,97,-33,50,-75,-24,92,-62, 
  /* [18][0][][] */ -92,0,-68,-96,109,87,-40,-75,52,86,127,75,-7,111,-36,0, 
  /* [19][0][][] */ 57,127,94,72,50,-29,-18,-9,-28,111,43,112,61,73,-44,41, 
  /* [20][0][][] */ 85,-7,4,58,-70,-8,-23,41,-31,-58,-127,-38,86,-50,34,3, 
  /* [21][0][][] */ -116,-75,-34,118,-15,4,-127,78,-6,18,51,33,-28,53,-86,-1, 
  /* [22][0][][] */ -1,4,-73,-48,127,6,-39,56,64,79,43,67,-21,30,-9,34, 
  /* [23][0][][] */ -78,29,-15,21,8,54,103,103,-26,127,-33,-44,1,36,-50,-28, 
  /* [24][0][][] */ 33,-80,45,5,127,24,77,-37,57,30,42,26,-67,30,-2,-21, 
  /* [25][0][][] */ 114,-60,74,18,14,0,-25,90,113,-29,-41,12,127,-43,84,49, 
  /* [26][0][][] */ 64,39,117,90,81,-9,-78,-20,7,64,14,127,29,-83,19,-66, 
  /* [27][0][][] */ -72,23,-67,23,-34,105,7,-86,28,-90,127,8,57,-40,116,109, 
  /* [28][0][][] */ -49,25,-68,-127,27,-81,-3,-55,-91,85,-56,37,-25,21,-29,64, 
  /* [29][0][][] */ 87,97,-96,51,47,103,-37,-13,56,59,15,64,-127,27,-43,83, 
  /* [30][0][][] */ -27,69,-127,-51,68,-32,27,6,-49,41,-55,-2,2,66,-23,125, 
  /* [31][0][][] */ 26,-127,95,47,69,-80,-88,39,-18,2,16,-40,-84,48,29,127, 
  /* [32][0][][] */ -66,77,-2,55,-127,37,10,69,15,-120,36,-94,31,28,53,42, 
  /* [33][0][][] */ -60,-8,63,83,-14,11,-42,7,-39,-56,7,-10,-10,-12,16,127, 
  /* [34][0][][] */ -7,18,-89,-102,53,-9,-1,57,14,-17,-5,-14,-60,-24,-29,127, 
  /* [35][0][][] */ 73,-2,34,-14,2,23,-88,-32,-14,-127,-53,20,-14,-32,52,-38, 
  /* [36][0][][] */ 6,33,-124,-21,46,127,-21,30,-28,9,61,30,13,17,-88,43, 
  /* [37][0][][] */ 47,39,67,-55,74,-127,31,-8,-115,80,-80,-30,8,34,88,33, 
  /* [38][0][][] */ -41,127,44,-56,39,19,75,-103,16,0,-113,29,-43,-94,-82,15, 
  /* [39][0][][] */ 95,47,-117,-127,-27,-34,6,-73,12,-13,1,-38,60,0,-111,-65, 
  /* [40][0][][] */ -41,26,-73,-78,-53,-6,13,-127,-3,-11,5,-46,40,84,40,60, 
  /* [41][0][][] */ -38,-92,-9,127,3,-14,-64,-13,-11,-52,68,-56,-67,-3,7,20, 
  /* [42][0][][] */ -27,58,-22,-127,20,20,12,-28,62,3,-36,24,68,-17,-25,13, 
  /* [43][0][][] */ 9,41,0,20,127,31,29,21,14,37,-5,-79,-116,-47,-19,-13, 
  /* [44][0][][] */ 77,-17,20,43,-25,-5,3,36,31,-34,26,2,127,8,-51,-28, 
  /* [45][0][][] */ 10,-93,-69,46,-33,-87,11,52,37,-16,13,38,-81,127,34,-44, 
  /* [46][0][][] */ -22,-94,53,101,7,-5,-120,76,41,-46,54,-32,26,92,94,127, 
  /* [47][0][][] */ -30,-53,26,71,-2,3,44,11,9,-71,-127,-38,43,-25,-53,21, 
  /* [48][0][][] */ -75,84,-10,-20,6,52,-9,-125,32,-22,41,-44,45,-127,-54,-2, 
  /* [49][0][][] */ -50,7,47,-39,-6,6,113,127,-34,-42,-10,14,-43,31,-42,33, 
  /* [50][0][][] */ 63,36,-94,18,26,-127,-36,0,-86,44,-51,-12,10,-96,-110,-32, 
  /* [51][0][][] */ -67,42,-24,111,-35,33,-58,-71,-39,-73,9,-68,12,43,-2,127, 
  /* [52][0][][] */ -127,-3,27,-6,19,48,50,2,18,-87,-34,-48,-96,-50,-104,-2, 
  /* [53][0][][] */ -53,-79,-54,-127,-44,-4,2,94,48,-65,-45,19,-21,28,71,107, 
  /* [54][0][][] */ 11,-60,4,-16,-54,54,63,-23,-18,-96,44,32,-20,-17,-127,41, 
  /* [55][0][][] */ -10,-27,-39,25,62,-27,66,83,-61,-61,-127,-27,65,-30,-24,38, 
  /* [56][0][][] */ 74,-34,-58,-16,-127,18,-112,2,-10,-11,-34,21,94,-38,50,11, 
  /* [57][0][][] */ -78,-6,34,-14,127,32,60,44,-25,69,13,3,-63,103,-99,-22, 
  /* [58][0][][] */ 25,2,11,-18,31,-14,-54,-65,54,-127,-56,-5,-69,-45,-21,58, 
  /* [59][0][][] */ -63,-22,0,15,11,51,-97,-40,75,127,-80,4,-17,5,-16,2, 
  /* [60][0][][] */ 11,-62,-2,23,-127,-56,44,15,-4,59,-12,57,1,-36,32,41, 
  /* [61][0][][] */ 25,26,-76,-14,-46,-22,-127,-82,-14,-2,39,94,72,-51,113,67, 
  /* [62][0][][] */ 49,-25,39,-28,-10,39,52,127,-59,120,11,92,31,41,70,106, 
  /* [63][0][][] */ 26,-120,-21,-21,-81,21,44,-22,-18,-24,2,-21,-36,127,119,45, 
  /* [64][0][][] */ -9,-9,-127,-25,22,43,37,-10,-10,-94,38,-6,62,-30,-67,100, 
  /* [65][0][][] */ -23,1,62,64,100,-7,95,90,-52,2,-126,-81,39,127,-84,-12, 
  /* [66][0][][] */ -35,-110,-6,-103,-79,-127,63,-24,-20,-50,12,94,-65,-48,-71,95, 
  /* [67][0][][] */ -16,-72,-72,-29,-81,113,-11,-127,-79,-35,-50,-97,14,-22,-51,46, 
  /* [68][0][][] */ 127,59,32,-1,-100,8,-76,-55,-91,-117,-21,6,54,-50,77,-88, 
  /* [69][0][][] */ 32,4,44,-23,-3,-48,-50,37,-16,127,-22,1,-3,39,68,-24, 
  /* [70][0][][] */ 36,-12,-29,67,-109,38,-18,-100,96,127,39,75,55,-57,-6,30, 
  /* [71][0][][] */ 119,-70,77,127,-99,-51,28,-11,108,16,-41,44,77,-84,42,1, 
  /* [72][0][][] */ 5,-40,50,99,42,4,-127,69,89,-17,30,3,-49,-70,-51,83, 
  /* [73][0][][] */ 64,15,72,-127,69,-92,-84,59,-17,124,-30,20,21,-101,17,-46, 
  /* [74][0][][] */ 80,15,28,49,-127,-34,47,5,-77,-34,13,-36,21,-63,6,23, 
  /* [75][0][][] */ 77,127,-92,17,54,48,-27,-35,-15,-29,50,70,-119,62,67,82, 
  /* [76][0][][] */ -66,-33,1,-50,-62,-4,104,-2,-74,19,100,57,-58,-127,-18,101, 
  /* [77][0][][] */ -62,127,-21,15,-45,-76,45,84,35,-60,-9,65,-17,60,-15,72, 
  /* [78][0][][] */ 114,43,-51,23,-91,28,-127,-32,4,-22,-67,3,38,-116,39,70, 
  /* [79][0][][] */ -77,-41,122,42,-28,-75,-60,-63,-24,18,10,23,-56,127,-53,68, 
  /* [80][0][][] */ 62,103,30,-127,-9,35,90,-31,20,29,-48,14,95,-55,7,-8, 
  /* [81][0][][] */ 43,-62,9,-124,96,43,-10,127,101,21,-26,-58,-17,11,-100,-59, 
  /* [82][0][][] */ 80,46,72,-5,127,-96,22,47,1,112,-38,28,-17,-44,38,-114, 
  /* [83][0][][] */ -38,65,8,26,80,44,127,104,2,65,-20,-48,-96,90,-73,-113, 
  /* [84][0][][] */ -4,-99,-13,104,-2,-94,-87,45,-97,62,-63,-17,-127,77,-7,-53, 
  /* [85][0][][] */ -101,46,-45,-19,-6,-31,-44,-29,-25,29,11,-57,-127,-61,-67,50, 
  /* [86][0][][] */ -11,58,91,104,39,-41,49,19,8,25,-51,-70,34,66,-127,-64, 
  /* [87][0][][] */ -16,50,127,-29,-94,-24,19,12,29,-27,12,44,-44,22,-6,-5, 
  /* [88][0][][] */ -40,-74,-116,29,37,43,-5,29,-17,-75,-109,-106,127,-16,9,46, 
  /* [89][0][][] */ 29,17,19,-121,19,-62,-58,57,127,-14,36,-97,6,-28,52,-77, 
  /* [90][0][][] */ -1,66,15,12,-31,38,43,110,4,-48,-12,127,44,15,-44,69, 
  /* [91][0][][] */ -66,9,-29,78,94,65,-48,-111,-54,39,3,20,-114,-127,-74,-27, 
  /* [92][0][][] */ -46,61,6,-37,-127,1,-94,50,-41,65,112,100,-14,-17,72,16, 
  /* [93][0][][] */ 102,44,95,57,-127,-83,22,37,-24,-59,-24,-63,20,-49,-17,-5, 
  /* [94][0][][] */ -32,-127,30,-107,10,35,-20,4,78,-25,4,52,17,62,-43,47, 
  /* [95][0][][] */ -34,-55,-30,-67,127,101,-34,46,84,48,-71,65,-36,114,-88,30, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0017464306438341737, 0.0014385548420250416, 0.0020411126315593719, 0.0028271891642361879, 0.0016456438461318612, 0.0016951966099441051, 0.0012921014567837119, 0.0020598012488335371, 0.0017718573799356818, 0.00091624370543286204, 0.0021922420710325241, 0.0014887162251397967, 0.0019628654699772596, 0.002064715139567852, 0.0023405721876770258, 0.0018785655265673995, 0.0025305633898824453, 0.0011520331026986241, 0.0014912891201674938, 0.0021269423887133598, 0.0018246074905619025, 0.0008117335382848978, 0.0012616893509402871, 0.0019836218561977148, 0.002064849715679884, 0.0020081433467566967, 0.00082362862303853035, 0.0019000474130734801, 0.0022803661413490772, 0.0021875104866921902, 0.0012930359225720167, 0.0023594072554260492, 0.0010168729349970818, 0.0030655970331281424, 0.001963769318535924, 0.0019400506280362606, 0.0020330587867647409, 0.0014828903367742896, 0.0019755475223064423, 0.002167226979508996, 0.0023358329199254513, 0.0024737906642258167, 0.0029254693072289228, 0.0033392373006790876, 0.00339903449639678, 0.0025246618315577507, 0.0016820251476019621, 0.0023926105350255966, 0.0026616945397108793, 0.0024909880012273788, 0.0017174102831631899, 0.0021792894694954157, 0.0026111165061593056, 0.0022299785632640123, 0.0022946051321923733, 0.0022217421792447567, 0.002470607403665781, 0.0016578221693634987, 0.0013513835147023201, 0.0022791423834860325, 0.0028994239401072264, 0.0018237309996038675, 0.0021865400485694408, 0.0021169136743992567, 0.001633830601349473, 0.0012604689691215754, 0.0016761959996074438, 0.0020582776051014662, 0.0013816537102684379, 0.0026385129895061255, 0.0013728189514949918, 0.0015695937909185886, 0.0019640207756310701, 0.0015843161381781101, 0.0019648012239485979, 0.0020579576957970858, 0.0025515737943351269, 0.0026032403111457825, 0.0016699768602848053, 0.0019305517198517919, 0.0019070915877819061, 0.0018757269717752934, 0.0011286099907010794, 0.001851510489359498, 0.0018461401341482997, 0.0023782362695783377, 0.0025647312868386507, 0.0037383870221674442, 0.00069360493216663599, 0.0026258633006364107, 0.002987939864397049, 0.0022230069153010845, 0.0010360982269048691, 0.0018349684542044997, 0.0026971460320055485, 0.0018423587316647172, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -34501, -8449, 5981, -14023, 17803, -19751, 30032, -6624, 13560, -10103, 16686, 13861, -3346, -35489, -1413, 5549, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.0569516790565103e-05, 4.5248558308230713e-05, 5.2012816013302654e-05, 4.2924617446260527e-05, 6.5302752773277462e-05, 0.00011502555571496487, 4.7975787310861051e-05, 5.832585520693101e-05, 8.0592995800543576e-05, 8.178695134120062e-05, 7.4498959293123335e-05, 6.1451515648514032e-05, 6.1577004089485854e-05, 7.4141142249573022e-05, 5.847809006809257e-05, 5.3973635658621788e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 14,28,22,19,-18,-81,-8,3,-14,-74,20,-9,63,-71,61,31,-84,-35,50,7,85,21,-57,12,-1,65,127,77,12,80,65,-35,4,-2,-1,-29,36,33,-13,-15,122,17,20,-24,-3,-7,11,-39,19,-32,95,-8,-66,0,44,40,-6,-38,1,23,-10,33,-61,-8,18,1,62,40,5,-28,30,23,-1,36,17,32,53,-39,40,30,-14,51,31,41,-57,11,-12,63,20,12,-95,-18,21,3,109,69, 
  /* [1][0][][] */ 20,36,-48,-17,-6,-53,96,-67,-54,-30,-57,-45,-5,-42,-2,-47,-25,-22,-20,-10,-12,-93,127,-32,7,16,-3,60,-44,13,-31,19,-37,27,17,8,-18,58,-65,76,38,13,-6,-41,51,-50,-1,34,-89,4,57,-111,-41,54,65,66,33,29,-68,19,-35,-11,-17,-19,40,30,96,12,-41,-125,13,-6,20,63,-11,30,-52,-25,99,-24,38,-9,46,-53,-30,-61,-13,12,-20,-48,26,0,70,-56,-35,62, 
  /* [2][0][][] */ 13,-13,14,-7,62,49,-53,18,-59,36,11,-22,29,-13,12,24,26,-28,-127,-14,-21,-41,-20,16,-5,-16,-37,11,-39,-23,-23,59,-7,-39,-8,12,-43,17,-15,-10,58,10,8,34,5,45,-3,-10,-75,3,-21,21,-20,38,7,-63,29,16,39,26,-30,-2,-17,56,31,-8,-32,-8,-9,-5,-19,-28,24,46,17,66,-49,-13,-23,-38,36,26,55,-21,-9,-43,-14,-45,-10,-31,-7,59,-2,-2,81,-41, 
  /* [3][0][][] */ 49,-40,-30,-124,-14,-24,117,-28,27,127,-71,-20,0,-21,-29,65,60,48,-34,14,-53,21,13,10,-46,78,55,-6,-45,-14,-78,63,5,-22,23,-30,-4,-64,-22,56,10,11,-15,21,60,-64,-11,29,53,-25,24,-42,104,34,32,-5,-2,-23,-4,-43,-43,43,66,2,-39,-30,121,-43,-50,-20,-60,36,17,-73,5,-78,28,-52,125,-10,-10,-58,-38,-50,-35,-45,79,79,-47,48,-55,-3,6,-79,-26,31, 
  /* [4][0][][] */ -35,79,31,21,-6,10,-49,-25,14,-33,-3,-7,26,40,-23,26,-6,-49,-16,-70,24,-33,-67,13,-35,-38,-26,13,-39,127,-50,-20,7,-46,5,-25,78,50,-39,11,18,7,15,-43,-59,-3,63,-28,26,-17,-61,-5,-70,33,38,21,6,69,-28,21,-34,-70,-28,-3,60,22,-73,-5,1,-1,14,-78,-15,63,51,71,-40,22,-67,46,24,61,36,-61,40,-70,-29,-75,-37,-54,-54,-18,-1,16,39,-34, 
  /* [5][0][][] */ -9,-8,40,-18,-13,-27,-13,8,42,7,-9,-6,-17,-21,27,-14,-13,10,-41,-27,-19,13,-11,11,23,-39,60,-18,2,43,13,78,-15,-76,23,9,-31,-25,-37,-6,-44,1,-24,14,5,22,-65,22,-21,18,50,-18,20,-66,8,21,-21,-54,8,-35,45,17,18,42,-34,12,103,-20,-5,-20,15,13,-6,30,42,9,-4,-13,127,42,-21,-9,-28,30,44,62,8,93,-2,-37,-12,13,14,-10,-28,24, 
  /* [6][0][][] */ 34,-52,61,21,-36,127,-54,-113,-35,-81,-100,68,2,10,-46,85,10,32,4,-42,-92,-18,-102,-58,-4,-56,-3,71,-127,46,-25,-40,53,87,-19,3,-4,-44,28,-12,-67,38,40,-38,17,45,-105,-15,62,5,-91,-111,83,-3,-46,-28,23,-27,21,-24,-22,-36,41,1,51,-84,-65,-69,-106,19,-23,-67,-25,-98,12,-102,89,5,-72,37,-27,80,35,-104,70,-46,-20,6,-73,81,-76,82,48,-41,79,-107, 
  /* [7][0][][] */ -4,-5,-67,62,-24,6,32,-10,-101,-3,70,58,-6,-53,-11,-38,-9,-5,-12,-2,-55,-25,-52,-47,59,42,-1,62,-6,26,11,21,-43,-127,26,107,-3,9,-35,14,-14,-16,9,-81,22,47,63,75,-7,44,-51,8,30,-51,35,-61,-20,31,-76,-25,51,15,12,-31,64,-53,100,-22,-67,-23,61,6,-13,-32,-85,-26,36,-42,89,-39,0,-16,-61,-37,46,15,-75,44,-8,19,8,24,57,4,82,-12, 
  /* [8][0][][] */ -14,-60,16,1,-12,-13,20,-1,-6,0,48,46,17,26,-33,-3,70,-2,20,5,-5,-67,-29,-16,-18,-34,64,5,-14,47,9,-24,-21,1,4,3,-45,-12,8,-32,-1,44,24,-37,15,-15,28,-10,30,1,47,1,0,14,-37,6,-12,107,-61,-3,-8,-65,-61,-6,-78,-31,-21,24,-5,7,43,-20,-34,-127,50,-101,8,16,-55,22,-32,-8,-1,61,63,-61,-44,47,-40,86,7,-16,-45,-5,-2,-60, 
  /* [9][0][][] */ -21,-21,-36,31,7,27,0,32,-51,-2,54,61,-27,56,19,-50,-17,30,-32,-47,-4,41,-15,8,-31,26,13,12,29,-12,13,-15,-10,-24,4,56,-19,-11,30,7,-17,-30,17,-3,5,40,-2,37,-39,4,-23,40,127,11,-19,-5,12,-15,31,15,-38,8,82,11,9,20,66,3,27,-6,-25,27,8,-125,-48,-119,-31,-14,41,-9,-1,30,12,-46,45,11,-59,0,2,115,44,26,50,43,-9,25, 
  /* [10][0][][] */ 30,47,8,3,-15,22,-46,-28,61,4,-45,25,18,11,-11,-58,-35,0,11,-3,20,-13,-29,-34,6,-18,-90,39,-22,52,-6,6,24,22,-21,5,15,-1,11,4,38,-11,62,-46,-33,-7,15,22,23,-1,5,-21,-23,-20,-8,31,-18,6,-13,-9,-16,-36,-4,11,-7,-18,-86,-33,-56,-13,40,-15,-16,31,27,18,55,-22,-90,6,-6,30,10,-8,11,6,-74,-127,-22,28,16,18,45,-25,23,27, 
  /* [11][0][][] */ 27,-41,6,12,-57,36,9,3,72,-25,-27,-45,27,15,8,-6,-33,51,19,-66,1,35,10,-25,33,20,67,-1,30,-56,-29,14,22,107,-104,4,17,-14,63,18,-55,50,-18,14,-43,-6,-15,-11,56,-25,-32,-15,-25,12,-88,94,-39,4,-7,-35,21,0,-15,-70,-6,-48,-127,-81,-3,-37,-95,39,52,22,-14,9,40,54,-111,-38,-8,-5,-4,-5,-16,-5,60,81,27,-53,10,6,-40,30,90,33, 
  /* [12][0][][] */ 22,32,-31,-22,18,-25,3,35,53,-42,22,-1,6,-19,-8,8,12,-48,-22,10,9,53,6,52,-41,-38,-127,-13,72,-24,28,-6,-15,-79,65,-8,36,-17,-4,21,-9,-60,11,31,46,-5,23,-17,-68,1,-54,94,79,-25,32,-79,8,22,-42,-36,11,51,82,6,-17,-18,32,24,109,27,22,25,6,-21,-11,-7,-37,-64,41,-69,26,-50,33,-41,5,5,2,-110,-3,39,-46,17,15,64,14,40, 
  /* [13][0][][] */ -12,27,-79,29,30,13,-14,3,26,66,-34,44,-52,-17,57,-52,13,54,56,9,-34,-43,-8,9,38,40,-14,16,11,37,48,-26,-13,59,-7,49,23,-42,-53,-47,-1,-14,20,12,40,52,-34,43,-41,34,-3,0,-11,-41,60,38,13,-47,-12,-19,23,24,9,-22,11,84,126,31,19,3,-52,-21,43,50,-81,45,25,-74,127,-44,-12,-37,27,-2,31,60,-36,-18,-15,-18,12,44,38,20,60,53, 
  /* [14][0][][] */ -16,49,31,17,-67,-54,27,52,-70,-19,86,6,-80,-12,79,-23,-43,35,-52,27,-21,24,-89,15,-44,-1,-61,-113,17,0,35,88,-68,31,17,-21,-27,-67,-19,-54,37,-32,46,-20,-9,53,-71,34,-24,-40,95,24,-9,34,-25,40,-55,37,0,45,43,63,-7,47,16,-47,-2,-62,48,58,85,36,-61,37,18,11,25,-14,37,24,-81,125,-12,-127,86,-1,-6,8,-114,-16,-28,0,-25,6,39,38, 
  /* [15][0][][] */ 76,-37,33,30,42,15,-13,-14,16,33,-62,-15,70,62,-2,-15,-5,3,-82,50,2,-27,6,27,60,-33,88,29,40,-31,-42,67,69,55,-3,-85,58,71,76,52,90,35,-17,6,-36,-126,33,-40,-30,-26,-14,5,-5,-54,-36,48,-12,12,-11,21,1,-50,-28,31,37,43,-74,39,-7,-33,-8,-1,4,-127,-48,-97,-23,16,-126,28,83,-35,54,26,-51,1,-9,-22,39,96,17,-65,-39,-34,37,-42, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.003178679384291172, 0.0023746378719806671, 0.0027296249754726887, 0.0022526776883751154, 0.0034270791802555323, 0.006036524660885334, 0.0025177623610943556, 0.0030609325040131807, 0.0042295088060200214, 0.0042921672575175762, 0.0039096944965422153, 0.0032249668147414923, 0.003231552429497242, 0.0038909164723008871, 0.003068921621888876, 0.0028325286693871021, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10702, 492, -6387, 8118, 1522, -1559, -638, -1024, 3068, -5150, 253, -1950, 12083, -5046, -3025, -9153, 206, 2, -12306, 898, -4203, -280, -9254, -1803, 154, 9361, -11952, -4314, 1232, -3230, -280, -1309, 23768, -115, -3319, 1118, -134, 13834, 6333, 12787, -434, 6605, -162, 5576, 2079, 1286, 8678, 3509, -5447, -47, -5145, 33, -1278, -4728, -673, 2549, 3195, 3387, 1045, 1687, -610, -2656, -1617, 8500, 10737, -1917, 19929, 17416, 280, 1800, 11591, -1841, -64, 1968, -3747, 687, 20133, 12664, 13094, 16862, 19362, -2184, 12345, 11462, -1526, -1235, 12269, -8836, 10970, -477, -9706, -4014, 223, 685, 29370, -1611, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00011131245992146432, 0.00021927132911514491, 0.00014665037451777607, 0.00013507177936844528, 0.00017661716265138239, 0.00032070121960714459, 9.6408650279045105e-05, 0.0001821361220208928, 0.00027346075512468815, 0.0002084122970700264, 0.00025707553140819073, 0.00015063116734381765, 0.00010942075459752232, 0.00012156211596447974, 0.00018958344298880547, 0.00011931258632102981, 0.00020062056137248874, 0.00023949879687279463, 0.00010956306505249813, 0.00027523658354766667, 0.00020316187874414027, 0.00024151113757397979, 7.1089278208091855e-05, 0.00016626249998807907, 0.0012780436081811786, 0.00011913056368939579, 0.00019223704293835908, 0.00016181834507733583, 0.00026257944409735501, 0.00016119246720336378, 0.00016716087702661753, 0.00025720184203237295, 5.3155363275436684e-05, 0.00042050029151141644, 0.00014650645607616752, 0.00013276106619741768, 0.00026944605633616447, 7.6760690717492253e-05, 0.00014080827531870455, 0.00010508454579394311, 0.00042337540071457624, 0.00015766106662340462, 0.00018743166583590209, 0.00014788658882025629, 0.00011318651377223432, 0.00020203378517180681, 0.0001334932167083025, 0.00018037347763311118, 0.00018195997108705342, 0.00030384384444914758, 0.00019082968356087804, 0.00016096846957225353, 0.00010973354073939845, 0.00019293260993435979, 0.00018403830472379923, 0.00022926995006855577, 0.00010044036025647074, 0.00032261601882055402, 0.00030957421404309571, 0.00023033986508380622, 0.00027452755603007972, 0.00022327354236040264, 0.00011136136890854686, 0.00011137461842736229, 0.0002285120717715472, 0.0003346832818351686, 8.4651393990498036e-05, 8.4657200204674155e-05, 0.00021901213040109724, 0.00027977247373200953, 0.00012836720270570368, 0.00020006352860946208, 0.00041453493759036064, 0.00014135053788777441, 0.00014772734721191227, 0.00015935408009681851, 6.7903260060120374e-05, 0.00014520612603519112, 0.00010073178418679163, 0.00012983560736756772, 7.3340073868166655e-05, 0.00023761743796057999, 8.5998042777646333e-05, 0.00024681675131432712, 7.299898425117135e-05, 0.00029648715280927718, 0.00011994998203590512, 0.000191708211787045, 0.0001226746680913493, 0.00017365167150273919, 9.0439905761741102e-05, 0.00018077707500196993, 0.00021438275871332735, 0.00014488908345811069, 5.4068437748355791e-05, 0.000240844048676081, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -34,-17,-4,-21,81,2,29,-8,-8,5,-10,-12,-38,16,0,-20,-13,4,4,-17,2,33,37,47,-5,-10,-28,-7,11,-7,30,6,7,5,-5,-36,-2,-67,-77,7,-2,-7,42,-18,-37,38,-55,-19,-27,4,1,58,-56,-4,39,-13,-8,-13,3,-18,-7,-6,-6,-38,-16,-16,-44,-52,-21,17,-12,-1,31,-4,-6,-4,-29,2,127,-33,-127,12,-113,-26,-20,-13,12,12,-10,-11,9,-28,-12,37,-36,4, -6,27,44,-55,-46,7,127,-55,-2,-14,-37,12,-76,11,-90,84,-8,71,81,-38,-3,127,108,127,24,-3,47,68,124,40,127,-25,-97,-15,-90,-43,-23,-78,127,-49,-24,-127,-9,-38,57,-38,-26,-8,34,-3,35,127,-82,32,-76,-5,-87,-2,-9,26,-3,-118,-117,-46,-51,4,-3,-97,-13,9,-82,113,-127,-17,11,-35,-104,-62,-9,-91,-96,7,19,-66,127,66,-75,34,-127,6,33,-11,3,127,-49,-86, -41,-6,-4,-15,49,5,44,-24,-21,18,-11,-2,-7,9,-3,-35,-12,1,-12,-33,1,6,49,29,-7,-14,3,-29,7,3,14,12,-7,2,-22,53,0,-65,-61,8,-7,0,22,-12,-26,-24,-39,-26,-20,-6,7,43,8,-10,6,-12,46,-23,5,-21,-8,1,-47,-16,-22,-29,127,-38,-15,11,3,9,27,8,-1,14,-17,26,-41,-23,-113,7,-127,-23,14,-24,11,-19,-36,-27,3,50,-2,32,-36,11, 
  /* [0][1][][] */ -92,-12,36,-48,35,110,-44,-10,-3,-9,-24,-11,-127,38,27,79,-15,41,102,19,41,-12,127,-22,32,33,63,8,-18,-4,-6,-19,-127,-17,72,-23,-9,-127,-80,-127,-20,-4,96,-29,-89,127,-83,-89,47,58,19,-45,-107,66,62,-27,4,-36,34,-12,13,0,95,-91,-33,19,-30,-88,-19,-12,-127,17,77,127,5,-83,-127,-63,-64,-59,-109,-5,-35,-61,41,24,-110,64,-51,127,100,-74,127,0,-79,-4, 89,127,127,127,-127,-127,98,-63,127,127,-78,-72,-76,127,-25,127,127,-127,127,127,127,-79,80,-100,-127,-127,127,127,-127,127,-27,127,-81,127,127,-108,127,90,18,-16,127,-2,-127,-98,127,-33,127,127,127,-127,127,-118,112,127,-127,127,-127,127,-127,127,-96,127,105,-127,127,127,-20,127,-110,-127,-27,-127,19,125,127,77,18,-127,100,-127,58,127,112,127,126,56,-127,127,-104,48,-3,-16,-96,-26,-127,-25, -127,-31,34,-61,-1,69,-60,3,-38,-10,-2,127,-119,27,29,64,-22,52,68,-2,24,-26,88,-15,31,17,46,-11,-14,-5,12,-11,-119,-34,79,127,0,-102,-86,-82,-31,-15,30,-38,-77,-73,-78,-123,36,63,2,-24,127,10,80,-42,73,-33,44,-42,-2,-24,-127,-42,-65,-8,-64,-84,-24,-4,-98,0,49,-105,3,127,-94,-42,-62,1,-123,-11,-74,-80,9,27,-80,39,-29,-70,127,127,-48,-19,-98,-7, 
  /* [0][2][][] */ -29,-43,-9,-25,31,4,-2,19,-9,3,31,-38,51,6,-4,-34,-2,-13,-37,-19,-9,-5,29,-18,-2,-9,-14,-11,-4,-15,-18,3,-9,-5,21,-27,-1,-22,-37,-3,-22,4,22,10,19,7,-43,-6,-37,11,-23,-21,-10,-22,34,-15,-6,-18,5,-12,-2,25,14,17,-35,-15,122,14,23,16,10,4,-17,-21,-11,-31,-22,13,-28,-32,-41,4,-86,-17,-20,-3,55,-15,4,10,4,-11,-9,-16,-23,-6, -14,-56,23,-99,-36,-2,66,127,-55,55,127,-39,-43,13,127,92,-12,-35,76,-52,-20,-33,117,23,15,-13,29,-1,-14,-1,-90,-36,-92,-30,-90,-14,-90,-70,69,-83,-18,-97,-44,127,31,-28,-34,-9,27,-2,-15,-8,60,25,-42,-36,-52,-44,38,-47,127,25,109,20,-92,-43,-26,-68,127,18,-31,23,20,-30,23,-21,-5,-41,8,34,-79,-20,-81,-67,34,-127,-1,16,-38,-3,36,8,20,-119,-71,127, -20,4,-6,-9,22,-4,4,17,-25,-2,14,39,55,-1,-5,-32,-3,6,-16,-31,-6,-6,13,-4,-8,-6,-11,-22,-4,-6,-28,8,-14,-1,15,-6,-3,-57,-32,-6,-25,3,-4,7,21,-11,-47,4,-31,1,-9,-20,9,-33,28,-14,47,-11,6,-18,0,31,-10,26,-26,-22,-30,15,26,4,8,2,-39,-49,-11,-14,-32,8,91,-11,-41,0,-63,2,-6,2,52,0,7,-1,-8,25,-2,-15,-25,-10, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0061121345497667789, 0.012040124274790287, 0.0080525288358330727, 0.0074167512357234955, 0.0096979960799217224, 0.017609609290957451, 0.0052937706932425499, 0.010001040995121002, 0.015015649609267712, 0.011443858034908772, 0.01411594171077013, 0.0082711130380630493, 0.0060082613490521908, 0.0066749397665262222, 0.01040997076779604, 0.0065514189191162586, 0.011016015894711018, 0.013150808401405811, 0.006016075611114502, 0.015113160014152527, 0.011155558750033379, 0.013261305168271065, 0.0039034911897033453, 0.0091294245794415474, 0.070176996290683746, 0.0065414239652454853, 0.010555678978562355, 0.0088853975757956505, 0.014418160542845726, 0.0088510308414697647, 0.0091787548735737801, 0.014122877269983292, 0.0029187453910708427, 0.023089546710252762, 0.0080446265637874603, 0.0072898711077868938, 0.014795202761888504, 0.0042149070650339127, 0.0077317408286035061, 0.0057701612822711468, 0.02324741892516613, 0.0086571229621767998, 0.010291817598044872, 0.0081204092130064964, 0.0062150382436811924, 0.011093615554273129, 0.0073300730437040329, 0.0099042542278766632, 0.0099913682788610458, 0.016683975234627724, 0.010478401556611061, 0.0088387308642268181, 0.0060254363343119621, 0.010593872517347336, 0.010105488821864128, 0.012589145451784134, 0.0055151507258415222, 0.017714750021696091, 0.016998628154397011, 0.012647894211113453, 0.015074227005243301, 0.012259884737432003, 0.0061148200184106827, 0.0061155473813414574, 0.012547530233860016, 0.018377359956502914, 0.0046481830067932606, 0.0046485019847750664, 0.012025891803205013, 0.015362223610281944, 0.0070486054755747318, 0.010985429398715496, 0.022761991247534752, 0.0077615161426365376, 0.0081116650253534317, 0.0087500857189297676, 0.003728548064827919, 0.0079732257872819901, 0.0055311527103185654, 0.0071292351931333542, 0.0040270816534757614, 0.013047503307461739, 0.0047221272252500057, 0.013552634976804256, 0.0040083527565002441, 0.016280021518468857, 0.0065864180214703083, 0.010526641272008419, 0.0067360298708081245, 0.0095351617783308029, 0.0049660285003483295, 0.0099264159798622131, 0.011771693825721741, 0.0079558165743947029, 0.0029688819777220488, 0.013224675320088863, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1550, 6855, 187, 1667, 5363, 17349, 242, 3129, 13337, -1174, 17839, 4860, 1926, 556, 5112, 610, 2763, 5741, -286, 15955, 1412, 11019, -1819, 1881, -10286, 1292, 3052, 2522, 7338, 1600, 4533, 4249, 2230, 16011, 4549, 5453, 4688, 2399, 4695, 2543, 18863, 1511, 2687, 1901, 4661, 10479, 6728, 8365, 1278, -917, 2036, 6732, 2785, -3716, 7873, 130, 3262, 19573, 1422, 2182, 3734, 12601, 4607, -309, 20204, 14374, 1964, 5794, 7624, 6431, 2238, 1436, -5047, 5453, 1843, 3696, 389, 9442, 4140, 7351, 3047, 1269, 6091, 20113, 195, 10092, 7869, 2066, -859, 2650, 1153, 13399, 3888, 3002, 5210, 5367, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00021967249631416053, 0.00010948170529445633, 0.00027862880961038172, 0.00022243130661081523, 0.00012309246812947094, 5.3326388297136873e-05, 0.00024241766368504614, 0.00010987740097334608, 6.7241184297017753e-05, 0.00013146417040843517, 4.7978479415178299e-05, 0.00010011166159529239, 0.0001623082353034988, 0.00033565697958692908, 0.00011020794045180082, 0.0001294549583690241, 0.00021103746257722378, 0.00010794834088301286, 0.00014101296255830675, 5.668287121807225e-05, 0.00016864606004673988, 6.9879308284725994e-05, 0.00015249979333020747, 0.00011771794379455969, 7.0998547016642988e-05, 0.00014289144019130617, 0.00017066203872673213, 0.00014576557441614568, 0.00012152442650403827, 0.00016782285820227116, 0.00012964407505933195, 0.00012411267380230129, 0.00018504525360185653, 5.5123146012192592e-05, 0.00011903922131750733, 0.00011744529911084101, 0.00012862084258813411, 0.00017092103371396661, 0.00010461977944942191, 0.00015632066060788929, 4.9296486395178363e-05, 0.00017918462981469929, 0.00014629316865466535, 0.00010737983393482864, 8.6501844634767622e-05, 7.8756958828307688e-05, 9.993826097343117e-05, 9.1765228717122227e-05, 0.00022388507204595953, 0.00023911990865599364, 0.00019510620040819049, 0.00010750523506430909, 0.00016713447985239327, 0.00010298690904164687, 9.2446833150461316e-05, 0.00029914843617007136, 0.00010798569564940408, 4.6116878365864977e-05, 0.0001507773413322866, 0.00013821625907439739, 0.00012213774607516825, 6.6100124968215823e-05, 0.00013269702321849763, 0.00018828222528100014, 4.6514418500009924e-05, 6.0923444834770635e-05, 0.00021320689120329916, 0.00010744125756900758, 0.00010388877126388252, 8.437794167548418e-05, 0.00020035493071191013, 0.00014590389037039131, 0.00010898424807237461, 0.00012125798821216449, 0.00017855301848612726, 0.0001743402099236846, 0.00015127721417229623, 8.6953215941321105e-05, 0.0001385770010529086, 0.00011644047481240705, 0.00013515153841581196, 0.00012707394489552826, 8.0420912127010524e-05, 4.8674177378416061e-05, 0.00010664913133950904, 7.4744006269611418e-05, 8.9651410235092044e-05, 0.00020039032096974552, 0.00016897545719984919, 0.00020156691607553512, 0.00016904390940908343, 6.2578859797213227e-05, 0.00013540650252252817, 0.00013478407345246524, 0.00010121207742486149, 0.00012045458424836397, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 51,11,9,53,-127,-21,85,35,63,80,-26,39,8,-11,44,77, 
  /* [1][0][][] */ -17,16,-84,8,127,98,-3,-7,-25,16,-67,31,-44,85,-46,-44, 
  /* [2][0][][] */ -45,66,84,-6,60,88,8,38,38,-11,40,-22,59,-127,-3,14, 
  /* [3][0][][] */ 127,-37,29,-1,27,33,-10,7,44,30,-57,-22,-37,47,-24,48, 
  /* [4][0][][] */ -84,-9,-3,29,-104,0,-75,-16,-16,30,-4,-47,-9,42,-49,127, 
  /* [5][0][][] */ -95,8,25,12,127,37,16,14,-58,26,-27,12,-54,68,-109,-34, 
  /* [6][0][][] */ -127,18,-31,35,-9,-69,59,19,9,-30,-41,33,6,7,-38,11, 
  /* [7][0][][] */ -18,108,71,-105,79,45,127,-4,52,16,4,60,82,46,-26,-2, 
  /* [8][0][][] */ -31,-20,-74,45,-52,86,-33,-67,28,-44,75,39,127,50,-97,16, 
  /* [9][0][][] */ -21,-127,-15,86,-45,-73,-22,60,54,57,9,67,-88,8,-9,-45, 
  /* [10][0][][] */ -33,-47,-91,55,-127,107,53,-89,10,-80,64,-34,30,103,-66,86, 
  /* [11][0][][] */ -29,-103,-47,21,1,83,41,-8,13,20,36,-84,24,111,-123,127, 
  /* [12][0][][] */ -30,-97,-68,105,-97,-127,13,56,78,65,-38,93,-11,-57,-14,-9, 
  /* [13][0][][] */ -59,-19,-34,-7,-10,0,25,14,-13,127,-7,-17,29,25,9,-16, 
  /* [14][0][][] */ -126,-28,-48,-57,-24,101,-13,-121,127,-70,77,0,112,-44,-101,-85, 
  /* [15][0][][] */ 9,-127,101,-55,-54,-33,4,50,21,-48,-84,-29,89,-38,-27,-51, 
  /* [16][0][][] */ -19,-32,30,-35,23,18,-24,-23,64,-127,43,-19,-14,-1,-73,-94, 
  /* [17][0][][] */ -30,-7,37,-64,33,-3,-47,5,111,-57,31,85,112,-67,-26,-127, 
  /* [18][0][][] */ 65,4,-28,-100,6,-29,106,-50,22,66,-1,65,-18,75,-6,-127, 
  /* [19][0][][] */ -49,-37,-35,-67,-121,50,-32,14,26,-35,49,-127,-25,-18,-39,-15, 
  /* [20][0][][] */ 4,71,63,-89,57,5,-54,84,-93,-127,36,-94,-38,102,-8,-5, 
  /* [21][0][][] */ 20,-91,-127,5,79,37,85,96,-74,-100,-16,12,87,-108,-16,34, 
  /* [22][0][][] */ 47,-18,83,-14,4,16,67,20,30,127,34,35,3,15,106,-7, 
  /* [23][0][][] */ -123,-64,-31,63,52,44,16,22,5,0,12,-85,-15,66,64,127, 
  /* [24][0][][] */ 8,-11,30,31,19,-92,6,-49,12,127,-110,64,-31,-63,68,-69, 
  /* [25][0][][] */ 127,-63,109,118,37,9,-8,37,-122,72,56,-58,-3,34,79,-9, 
  /* [26][0][][] */ -24,23,17,40,-60,118,-16,33,-55,-38,-83,32,5,22,50,-127, 
  /* [27][0][][] */ 48,1,-11,-53,-56,4,-78,16,-110,-30,-78,-39,-79,38,-20,127, 
  /* [28][0][][] */ -62,22,16,2,19,-18,-127,8,-9,-38,2,-14,3,-55,-73,-26, 
  /* [29][0][][] */ -18,-126,-29,101,-27,6,127,5,88,66,-118,71,32,-29,-58,69, 
  /* [30][0][][] */ 45,-45,-68,9,-127,31,56,-28,19,-6,8,-19,-22,46,-11,72, 
  /* [31][0][][] */ -127,-22,12,96,-28,1,-53,6,-32,-49,14,-27,-13,-53,-18,93, 
  /* [32][0][][] */ -127,-87,-84,3,-90,-48,4,-16,119,55,-57,-69,44,50,38,-11, 
  /* [33][0][][] */ -16,17,-91,40,-127,-102,53,-10,-126,26,-49,-51,-29,115,75,81, 
  /* [34][0][][] */ 33,57,4,35,-67,-45,35,17,16,-127,-15,35,-22,9,47,95, 
  /* [35][0][][] */ 36,-4,-80,-13,-127,16,100,-26,26,50,-15,-15,18,84,28,79, 
  /* [36][0][][] */ -2,-8,-55,54,127,-17,50,71,-79,14,-94,-85,25,-16,7,27, 
  /* [37][0][][] */ -120,47,2,-69,49,-101,-44,-37,-3,-23,-25,47,54,-77,19,-127, 
  /* [38][0][][] */ 41,107,39,-75,-106,-65,-127,-63,-48,-83,37,55,-68,-105,107,10, 
  /* [39][0][][] */ -4,-47,11,77,15,77,77,-50,-19,52,18,-26,-18,127,58,124, 
  /* [40][0][][] */ 113,44,89,112,-56,-52,-13,25,-74,68,-12,-16,-46,-24,127,-9, 
  /* [41][0][][] */ -23,-4,6,54,-95,111,0,53,-59,31,-110,13,12,25,48,-127, 
  /* [42][0][][] */ 7,-94,19,-25,127,34,66,9,-32,-90,-86,-16,-9,-7,-19,32, 
  /* [43][0][][] */ -40,-96,-51,-3,110,23,2,92,-69,-76,-127,-85,108,-6,-63,60, 
  /* [44][0][][] */ -48,-57,-95,-102,44,70,76,30,-48,-127,-58,90,-50,66,16,113, 
  /* [45][0][][] */ 1,-51,-66,-14,-127,73,-19,-59,58,-50,20,-45,0,10,-33,49, 
  /* [46][0][][] */ 24,-87,-7,0,79,-80,-20,82,4,-29,40,58,-56,-59,63,-127, 
  /* [47][0][][] */ -65,-22,-17,86,-11,8,32,30,-3,127,92,93,-41,71,-18,94, 
  /* [48][0][][] */ 47,-14,-77,-92,30,-70,11,55,49,-81,-2,26,-56,9,-38,-127, 
  /* [49][0][][] */ 50,29,7,39,-4,-23,41,47,-27,127,-33,38,-45,-21,65,77, 
  /* [50][0][][] */ 18,-4,23,13,-127,-18,-10,-50,63,25,21,60,-14,-58,23,-6, 
  /* [51][0][][] */ 22,-1,-10,-127,-22,94,54,-56,11,10,37,-40,61,77,-26,12, 
  /* [52][0][][] */ 30,-14,-6,-79,83,-121,-13,-33,33,-2,127,-63,28,-3,-39,92, 
  /* [53][0][][] */ -54,-51,44,-24,-41,-127,11,-97,-13,96,-90,76,-43,-28,19,-91, 
  /* [54][0][][] */ 52,76,47,-18,-127,-44,-93,-100,-8,13,53,70,-85,-41,65,21, 
  /* [55][0][][] */ 22,9,-34,72,-32,26,41,-19,9,127,14,62,6,7,-2,42, 
  /* [56][0][][] */ 38,-115,-101,93,-91,58,10,87,127,-7,71,50,-22,-16,51,117, 
  /* [57][0][][] */ 45,27,103,-80,94,-9,-15,8,96,-31,21,127,47,-55,108,-65, 
  /* [58][0][][] */ 79,-57,8,-62,38,15,2,127,40,89,-1,64,55,15,74,-7, 
  /* [59][0][][] */ -35,28,39,-29,13,-90,-13,4,12,33,-101,-85,-127,-54,65,-23, 
  /* [60][0][][] */ 32,-24,24,6,13,-11,24,-59,20,127,-16,71,-1,-14,-19,-24, 
  /* [61][0][][] */ 63,71,2,-38,-97,-127,-12,-63,-71,-29,-36,13,-55,-51,106,110, 
  /* [62][0][][] */ -17,108,-41,53,-69,127,-48,31,-77,3,-47,27,-36,31,65,-98, 
  /* [63][0][][] */ 24,-5,-75,-127,-11,-52,84,-7,-9,-87,-26,38,-44,80,26,-36, 
  /* [64][0][][] */ -34,5,28,-47,57,-62,46,78,-127,-26,-101,-45,-28,96,83,75, 
  /* [65][0][][] */ -59,-19,-44,-29,74,46,-32,-90,-127,-61,-8,-34,-126,110,-63,42, 
  /* [66][0][][] */ -16,59,-18,27,-42,127,-17,19,-58,12,-33,38,-30,45,50,-72, 
  /* [67][0][][] */ 11,-33,-38,-24,20,-89,60,-85,-3,34,5,109,-61,-28,-25,-127, 
  /* [68][0][][] */ -2,-127,-36,63,-16,9,23,84,44,28,56,17,-72,36,-14,1, 
  /* [69][0][][] */ 27,95,67,-127,56,16,-12,92,43,100,50,80,96,-97,15,-124, 
  /* [70][0][][] */ 60,21,52,-48,90,5,-92,-62,-127,-98,-19,44,-24,51,-99,-4, 
  /* [71][0][][] */ -14,-61,29,-38,62,-14,49,25,-83,73,-127,-48,13,84,-18,50, 
  /* [72][0][][] */ 10,14,62,11,-60,-30,-121,-56,-10,71,-26,60,22,107,-127,-17, 
  /* [73][0][][] */ 5,-41,-19,-38,47,-112,27,-59,80,97,117,-7,28,-16,-78,127, 
  /* [74][0][][] */ 9,-1,-16,80,-84,-7,90,22,84,61,27,116,127,28,-48,7, 
  /* [75][0][][] */ -35,41,-28,36,-50,127,-18,22,-41,32,-32,41,-18,51,29,-65, 
  /* [76][0][][] */ -78,95,-56,38,-127,-11,-8,24,63,42,-48,-55,52,-61,-127,47, 
  /* [77][0][][] */ 103,101,-116,127,79,60,62,51,41,19,92,-37,67,34,56,14, 
  /* [78][0][][] */ 20,-39,-7,-64,72,-118,37,-52,47,47,126,-20,15,-10,-49,127, 
  /* [79][0][][] */ -40,59,-3,22,0,-43,-35,2,-127,-5,42,5,97,35,-78,-42, 
  /* [80][0][][] */ -71,12,84,2,56,37,2,-127,-59,47,-70,-51,-6,-79,40,64, 
  /* [81][0][][] */ 87,73,-20,1,35,-31,73,113,-104,127,-67,-46,-44,21,118,120, 
  /* [82][0][][] */ 68,107,-21,-73,-9,-61,113,-126,46,32,-76,84,127,-25,93,-61, 
  /* [83][0][][] */ 13,-28,18,28,7,23,-23,-95,58,-27,87,21,44,-63,-58,-127, 
  /* [84][0][][] */ -127,-84,-49,-18,1,95,87,4,79,80,105,106,58,85,-93,1, 
  /* [85][0][][] */ 114,4,92,-77,71,-14,-38,85,19,126,-55,9,-37,59,127,12, 
  /* [86][0][][] */ -95,79,-54,-6,36,99,25,31,95,39,127,-41,-37,59,-20,-26, 
  /* [87][0][][] */ 13,-62,28,-45,42,-127,29,-33,47,-14,63,-38,39,-40,-35,75, 
  /* [88][0][][] */ -79,53,46,6,115,-36,37,23,-58,-76,98,-80,73,118,109,-127, 
  /* [89][0][][] */ -20,42,-17,34,-30,127,-19,38,-46,14,-43,23,-12,55,24,-92, 
  /* [90][0][][] */ 52,-77,23,27,127,-11,45,38,-17,-92,-113,-23,-22,-15,-64,23, 
  /* [91][0][][] */ 3,66,-16,-27,0,-97,-113,35,-79,24,-112,-124,-127,-101,0,10, 
  /* [92][0][][] */ 60,43,64,39,-127,-87,14,15,-24,32,-23,-31,-30,-80,17,-8, 
  /* [93][0][][] */ -10,-127,-110,53,-39,-47,-4,104,101,65,1,67,-57,72,-15,-22, 
  /* [94][0][][] */ 97,9,125,-31,17,-30,22,32,27,77,-9,50,22,15,127,-4, 
  /* [95][0][][] */ -64,-35,-21,-33,127,-2,45,70,-26,-7,-96,-46,12,20,-63,36, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0046046371571719646, 0.0022948868572711945, 0.0058404426090419292, 0.0046624657697975636, 0.0025801872834563255, 0.0011177943088114262, 0.0050814072601497173, 0.0023031812161207199, 0.0014094675425440073, 0.0027556696441024542, 0.0010056948522105813, 0.0020984779112040997, 0.0034022035542875528, 0.0070358309894800186, 0.0023101097904145718, 0.0027135536074638367, 0.0044236350804567337, 0.0022627455182373524, 0.0029558253008872271, 0.0011881508398801088, 0.0035350529942661524, 0.0014647662173956633, 0.0031966052483767271, 0.0024675298482179642, 0.00148822704795748, 0.0029952006880193949, 0.0035773105919361115, 0.0030554467812180519, 0.0025473188143223524, 0.0035177976824343204, 0.0027175180148333311, 0.0026015720795840025, 0.0038788025267422199, 0.0011554568773135543, 0.0024952255189418793, 0.0024618147872388363, 0.0026960696559399366, 0.0035827395040541887, 0.0021929743234068155, 0.0032766957301646471, 0.0010333220707252622, 0.0037559559568762779, 0.0030665057711303234, 0.00225082878023386, 0.0018131975084543228, 0.0016508540138602257, 0.0020948431920260191, 0.0019235252402722836, 0.004692938644438982, 0.0050122817046940327, 0.0040896940045058727, 0.0022534574382007122, 0.0035033682361245155, 0.0021587470546364784, 0.0019378126598894596, 0.0062705622985959053, 0.0022635285276919603, 0.0009666730766184628, 0.0031605002004653215, 0.0028972027357667685, 0.0025601747911423445, 0.0013855494325980544, 0.0027815117500722408, 0.0039466540329158306, 0.00097500608535483479, 0.0012770390603691339, 0.004469109233468771, 0.0022521163336932659, 0.0021776512730866671, 0.0017686774954199791, 0.0041997143998742104, 0.0030583459883928299, 0.0022844595368951559, 0.002541733905673027, 0.0037427165079861879, 0.0036544103641062975, 0.0031709782779216766, 0.0018226588144898415, 0.0029047643765807152, 0.0024407522287219763, 0.002832961967214942, 0.0026636444963514805, 0.0016857327427715063, 0.0010202776174992323, 0.0022355122491717339, 0.0015667370753362775, 0.0018792166374623775, 0.0042004561983048916, 0.0035419575870037079, 0.0042251194827258587, 0.0035433925222605467, 0.0013117388589307666, 0.0028383063618093729, 0.002825259231030941, 0.0021215442102402449, 0.0025248934980481863, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -6979, 12150, -21067, 3177, 16462, -18336, -45593, -8866, -7361, 9494, -18360, -15420, 7547, -10406, -3657, -5076, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00011496805382193998, 0.00015129518578760326, 0.00010874808504013345, 0.00013191314064897597, 8.0179750511888415e-05, 0.00013098999625071883, 9.3469578132499009e-05, 0.00013674890215042979, 0.00010297324479324743, 7.1812421083450317e-05, 0.00014945556176826358, 9.1869856987614185e-05, 0.00010406372894067317, 8.0183097452390939e-05, 0.00015168110257945955, 0.00010595564526738599, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 24,36,14,-29,62,66,-35,56,-13,110,7,47,-29,29,-17,48,38,80,47,-60,-61,78,-7,51,60,47,35,48,-50,-45,-3,80,-22,12,-61,52,51,-127,-32,17,16,-27,66,-8,-10,-56,-60,-16, 
  /* [1][0][][] */ -50,0,-78,-41,9,87,-54,24,-13,-33,-41,34,56,-20,-30,-21,-26,-35,-4,22,-62,41,-105,-41,-54,-39,49,67,-27,-29,45,-41,10,-58,-28,48,15,-63,127,-33,-27,29,-44,-18,36,50,30,17, 
  /* [2][0][][] */ 4,3,57,-34,-18,-80,16,17,104,75,-68,12,107,-48,127,83,-70,-19,-33,30,79,-74,-34,-103,13,-33,37,-71,42,44,-46,13,32,-30,57,40,-69,9,-2,-29,32,25,58,-17,15,-89,91,-56, 
  /* [3][0][][] */ 41,0,-24,-31,32,112,18,-21,45,-52,19,-28,-55,12,13,44,-49,-71,34,-127,-15,-1,-28,-21,-44,94,127,63,-15,-42,25,42,61,-31,94,33,-48,-57,-2,39,28,11,-18,1,28,22,-12,-24, 
  /* [4][0][][] */ 102,-6,10,-55,92,81,44,12,67,-19,-107,31,40,-19,14,-12,-94,-127,-26,-91,-28,25,-38,-30,-79,120,-99,118,-53,-58,23,79,41,-52,10,-31,-3,11,-32,29,-49,-14,-6,51,-56,96,-30,-51, 
  /* [5][0][][] */ -2,-7,-53,7,-12,53,21,-26,57,53,41,93,54,-20,27,-5,-34,127,-19,33,7,-5,-68,-12,32,2,-64,-32,-12,33,22,-15,-41,4,39,12,-43,9,-80,4,84,-21,23,47,-13,10,-41,33, 
  /* [6][0][][] */ 63,12,18,71,8,-26,104,-59,7,62,120,98,37,53,-46,59,31,-39,-84,84,43,-65,-39,52,-89,89,83,-6,113,43,-37,1,94,-66,-127,-9,93,38,-1,-5,15,57,52,-26,66,123,32,-8, 
  /* [7][0][][] */ -95,-7,-22,24,-61,-60,20,47,84,115,-60,-77,-107,17,-15,-16,-84,102,-1,125,-56,45,24,36,-23,-97,-33,-83,32,40,-9,5,-20,7,10,-19,-1,-57,127,9,5,39,16,-13,54,70,-31,1, 
  /* [8][0][][] */ -13,-87,48,-67,58,-59,71,-36,-29,-115,33,8,-24,2,31,23,-3,11,-39,99,10,32,-17,35,62,-14,-62,-32,-127,-25,-51,-111,13,-56,8,85,-6,35,108,15,12,4,77,114,-6,-65,-39,76, 
  /* [9][0][][] */ 22,-43,22,-62,41,89,-37,44,20,-38,-41,-16,15,-42,117,-16,6,-116,36,43,-81,42,55,-47,-32,-76,-30,79,56,78,-44,-26,-60,27,-17,127,-33,-41,-59,-29,-25,-8,28,113,58,89,-73,15, 
  /* [10][0][][] */ -15,16,-24,-7,23,31,-62,-45,48,39,60,-8,-35,-6,50,-50,-61,127,3,47,-3,-10,17,24,-47,46,2,95,35,8,-36,-7,64,10,-12,24,-12,-44,-36,19,-80,-3,20,-13,16,47,27,30, 
  /* [11][0][][] */ -29,43,-16,35,28,54,4,4,17,19,-127,-67,75,19,-7,-45,1,25,-38,-44,-15,-2,102,0,44,15,-21,32,-8,29,-9,49,26,-3,-52,1,43,82,98,18,33,-31,64,3,-52,-17,80,5, 
  /* [12][0][][] */ -64,-1,33,16,-60,-53,7,1,-35,-34,-127,13,73,-97,22,36,47,100,85,-119,-32,45,-41,-82,-2,-18,32,-32,6,14,-20,73,68,74,35,-33,-53,-28,30,0,-30,19,64,-1,35,-12,-41,-39, 
  /* [13][0][][] */ -50,-116,-43,-105,13,30,60,9,-116,21,114,-66,51,49,127,6,112,21,-12,-99,69,-77,120,-4,-82,2,-29,13,-42,-101,-114,19,43,-30,-79,58,25,-52,75,-81,-3,50,62,47,63,-24,101,-67, 
  /* [14][0][][] */ 66,12,-51,3,-39,11,-79,-27,-26,52,56,44,-9,-68,19,-45,50,-109,23,5,93,-57,26,1,-9,121,-90,5,-60,-29,-85,2,127,37,95,-24,-80,14,-24,59,-19,-44,106,-23,-52,-41,-56,49, 
  /* [15][0][][] */ -70,13,40,25,100,7,5,32,20,80,-17,60,60,-17,-38,-17,13,43,3,-42,27,-36,-52,-60,57,-62,-42,66,-36,12,17,12,-58,5,127,-6,-89,18,64,-14,-42,-17,25,0,-39,-31,-14,9, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0057061892002820969, 0.0075092073529958725, 0.005397474393248558, 0.006547221913933754, 0.0039795474149286747, 0.0065014036372303963, 0.0046391589567065239, 0.0067872339859604836, 0.0051108528859913349, 0.0035642532166093588, 0.0074179018847644329, 0.0045597604475915432, 0.0051649766974151134, 0.0039797136560082436, 0.0075283613987267017, 0.0052588777616620064, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 15469, -1473, 17788, -679, 14548, -2678, 35692, 151, 10547, 40301, 1238, 23854, -3292, 13349, 36484, 21987, -686, -5331, 3895, 43141, -1172, 19695, 1709, 19099, 18453, 35321, -2507, -3317, -973, 14832, 20974, 84, 720, -446, 117, 15944, 11074, 29457, -4, 17486, 26067, 1123, 720, 17401, 845, -1081, 39195, 22514, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.9783981568180025e-05, 9.1017464001197368e-05, 7.7152821177151054e-05, 0.00013922715152148157, 0.00011920295946765691, 0.00011135188833577558, 5.4657237342325971e-05, 0.00024242472136393189, 0.00010514263703953475, 4.838832319364883e-05, 6.8937064497731626e-05, 8.9784407464321703e-05, 0.00011572083894861862, 9.7291522251907736e-05, 4.8186382628045976e-05, 9.3426679086405784e-05, 0.00010839712194865569, 9.3900904175825417e-05, 0.00013288544141687453, 5.1799986977130175e-05, 0.00010273624502588063, 6.6987318859901279e-05, 7.8733959526289254e-05, 0.00012872673687525094, 8.1809463154058903e-05, 6.5480773628223687e-05, 8.278615860035643e-05, 6.3652543758507818e-05, 0.00023545297153759748, 9.7148855275008827e-05, 7.1414440753869712e-05, 0.00034461534232832491, 9.6764211775735021e-05, 0.0001710909855319187, 0.00010504808597033843, 8.1026235420722514e-05, 0.00010800598829519004, 6.4936277340166271e-05, 0.00010847015801118687, 0.00011879475641762838, 6.2000923207961023e-05, 0.00012700053048320115, 0.00020101094560232013, 7.538389036199078e-05, 0.00014155263488646597, 7.6927884947508574e-05, 4.8004043492255732e-05, 7.8632598160766065e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -103,79,-127,104,-81,65,-56,98,-82,-63,67,-44,66,-94,-57,-64,84,69,93,-92,71,-119,73,-94,-110,-57,59,122,-102,-55,-80,66,78,-89,68,-95,-78,-112,85,-49,-4,-102,117,-107,107,65,-73,-60, -122,95,-71,123,-73,123,-56,91,-120,-93,103,-71,95,-111,-74,-88,104,107,127,-125,88,-117,92,-125,-111,-83,70,127,25,-77,-95,115,106,-127,99,-113,-94,-127,105,-72,-111,111,127,-116,-35,111,-93,-101, -61,52,2,24,-16,60,-32,36,-42,-39,34,-22,37,-53,-28,-20,36,47,56,-30,20,-49,44,-55,-86,-37,21,28,83,-34,-60,33,34,-86,37,-35,-35,-26,43,-55,-115,-25,26,-60,-66,69,-25,-73, 
  /* [0][1][][] */ -103,95,-74,119,-74,104,-110,103,-92,-92,87,-86,82,-95,-93,-92,109,89,-55,-107,100,-127,96,-84,-127,-93,91,106,-127,-80,-100,80,101,38,97,-108,-110,-113,100,-83,-101,-117,115,-108,127,72,-102,-74, -127,127,-99,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-61,-127,127,-126,127,-127,-113,-127,127,119,17,-127,-127,127,127,46,127,-127,-127,-124,127,-127,-127,127,125,-127,-67,127,-127,-127, -70,81,-73,41,-51,38,-55,79,-41,-35,49,-53,47,-48,-58,-19,64,56,-52,-21,29,-48,50,-67,-114,-60,42,46,91,-57,-69,68,42,11,56,-45,-41,-20,53,-66,-58,-69,42,-64,-87,82,-24,-80, 
  /* [0][2][][] */ -41,38,-1,61,-31,41,-53,36,-50,-37,31,-51,39,-70,-46,-46,62,37,-75,-24,36,-48,40,-30,-43,-41,47,8,-75,-44,-45,30,49,51,50,-54,-50,-60,26,-33,-103,-63,62,-78,66,27,-63,-28, -60,53,-72,65,-57,36,-63,23,-60,-53,48,-69,54,-81,-59,-45,75,52,-97,-23,41,-34,45,-42,-41,-56,55,31,6,-80,-61,29,54,80,66,-64,-47,-54,32,-40,-58,57,58,-94,-39,50,-64,-47, -26,31,-72,12,-36,-9,-34,21,-11,-7,23,-25,18,-20,-26,16,37,19,-66,9,10,7,14,-26,-28,-19,27,14,64,-28,-15,5,22,42,29,-7,-12,-14,15,-23,6,-23,7,-38,-50,45,-13,-33, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0042408192530274391, 0.0038682420272380114, 0.0032789949327707291, 0.005917153786867857, 0.0050661256536841393, 0.0047324551269412041, 0.0023229324724525213, 0.01030305027961731, 0.0044685620814561844, 0.0020565036684274673, 0.0029298251029103994, 0.0038158372044563293, 0.0049181357026100159, 0.0041348896920681, 0.0020479212980717421, 0.00397063372656703, 0.0046068774536252022, 0.0039907884784042835, 0.005647631362080574, 0.002201499417424202, 0.0043662902899086475, 0.0028469609096646309, 0.003346193116158247, 0.0054708863608539104, 0.0034769021440297365, 0.0027829327154904604, 0.0035184116568416357, 0.002705233171582222, 0.01000675093382597, 0.0041288263164460659, 0.0030351136811077595, 0.014646152034401894, 0.0041124788112938404, 0.0072713666595518589, 0.0044645434245467186, 0.0034436150453984737, 0.0045902542769908905, 0.0027597916778177023, 0.0046099815517663956, 0.0050487769767642021, 0.0026350391563028097, 0.0053975223563611507, 0.0085429651662707329, 0.0032038153149187565, 0.0060159871354699135, 0.0032694351393729448, 0.0020401717629283667, 0.0033418852835893631, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2612, -1439, 849, -3255, 4108, -922, 5072, -4229, 1568, 739, 2747, 6356, 529, -479, 1003, 4695, -2539, 3895, 5727, 922, -1162, 3012, -1116, 5884, 2734, 2307, 1399, -1055, 9805, -532, 3439, -2567, -903, 4574, -1249, 2495, 2047, 1126, 431, 5150, 1795, 8926, -5595, 2227, 7758, 123, 2450, 3060, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0001720640721032396, 0.00022620076197199523, 0.00028074573492631316, 0.00014915362407919019, 0.00019173610780853778, 0.00019704297301359475, 0.0001518362550996244, 0.00013237939856480807, 0.00019097546464763582, 0.00023479694209527224, 0.00015940648154355586, 0.00012095487181795761, 0.00025476946029812098, 0.00025653134798631072, 0.00017324529471807182, 0.00015851864009164274, 0.00017936601943802088, 0.00019656805670820177, 0.00015141500625759363, 0.00025772876688279212, 0.0002245986252091825, 0.00018455905956216156, 0.00013406024663709104, 0.00014090067998040468, 0.00017679136362858117, 0.00017366571410093457, 0.00023222506570164114, 0.00024348178703803569, 9.131830302067101e-05, 0.00022703647846356034, 0.00013906072126701474, 0.00013902409409638494, 0.0001725345355225727, 0.00016657494415994734, 0.0001979362714337185, 0.00019625078130047768, 0.0002078804827760905, 0.00022339542920235544, 0.00017558831314090639, 0.00015144895587582141, 0.00027375289937481284, 9.655870235292241e-05, 9.9047611001878977e-05, 0.00020087798475287855, 0.00010715705866459757, 0.00021554801787715405, 0.00022545900719705969, 0.00020272057736292481, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 71,31,127,-33,65,102,-84,-58, 
  /* [1][0][][] */ 16,-87,-127,3,51,21,28,-2, 
  /* [2][0][][] */ -127,-5,-49,-24,53,23,-69,-38, 
  /* [3][0][][] */ 38,70,127,-71,-6,-99,-7,-12, 
  /* [4][0][][] */ -127,19,-51,-23,47,14,-36,-52, 
  /* [5][0][][] */ -100,28,-51,-12,7,31,-86,-127, 
  /* [6][0][][] */ -39,-127,-114,42,100,17,8,45, 
  /* [7][0][][] */ -59,-127,-90,-76,-63,-67,19,79, 
  /* [8][0][][] */ 83,30,-9,-8,99,-81,-127,11, 
  /* [9][0][][] */ -38,52,-55,84,-57,-37,127,-27, 
  /* [10][0][][] */ -21,127,37,65,115,-16,-13,59, 
  /* [11][0][][] */ -80,-37,-31,-11,-84,103,127,-7, 
  /* [12][0][][] */ 70,35,-127,35,-11,-39,-70,-16, 
  /* [13][0][][] */ 68,-33,-79,15,12,-127,-31,-26, 
  /* [14][0][][] */ 9,-75,74,12,127,-112,-64,23, 
  /* [15][0][][] */ -39,-37,3,127,64,77,-78,32, 
  /* [16][0][][] */ 112,34,-39,19,71,-104,-127,-20, 
  /* [17][0][][] */ 61,127,54,76,45,63,21,-89, 
  /* [18][0][][] */ 35,-13,2,0,127,5,22,-13, 
  /* [19][0][][] */ 12,127,30,11,-126,16,26,-36, 
  /* [20][0][][] */ -43,28,61,-127,8,47,-17,118, 
  /* [21][0][][] */ -37,74,45,-127,27,47,-13,115, 
  /* [22][0][][] */ -73,-68,-99,21,-127,122,105,-29, 
  /* [23][0][][] */ 97,33,-127,15,11,-51,-67,-23, 
  /* [24][0][][] */ -58,50,5,8,-25,82,-127,107, 
  /* [25][0][][] */ -100,-58,-127,11,-48,-68,64,91, 
  /* [26][0][][] */ 45,-15,-39,-38,106,-13,127,-43, 
  /* [27][0][][] */ 127,-67,30,94,0,25,-25,95, 
  /* [28][0][][] */ 38,59,53,-12,127,-57,42,-25, 
  /* [29][0][][] */ -15,-12,-21,-50,-67,11,127,-30, 
  /* [30][0][][] */ 46,-127,-58,-68,-118,5,5,-59, 
  /* [31][0][][] */ 14,22,-8,-14,-127,3,-27,-15, 
  /* [32][0][][] */ 42,-56,-56,79,-11,-86,117,-127, 
  /* [33][0][][] */ 55,127,43,37,50,-18,-26,-20, 
  /* [34][0][][] */ -112,-27,127,0,-22,100,90,16, 
  /* [35][0][][] */ -29,74,127,-17,-58,-73,-36,30, 
  /* [36][0][][] */ -96,6,100,-16,-18,127,77,23, 
  /* [37][0][][] */ -24,-80,-1,-127,-42,-81,69,39, 
  /* [38][0][][] */ 46,-15,88,-56,55,63,-127,10, 
  /* [39][0][][] */ -17,95,-127,-50,-21,-7,6,86, 
  /* [40][0][][] */ 64,-52,20,31,9,3,8,127, 
  /* [41][0][][] */ -20,89,127,-6,14,74,-72,17, 
  /* [42][0][][] */ 64,-119,-116,-18,-127,6,21,-106, 
  /* [43][0][][] */ -5,-92,36,-70,127,-40,19,39, 
  /* [44][0][][] */ 13,127,113,21,7,41,-81,-3, 
  /* [45][0][][] */ -32,41,11,85,-118,57,-127,17, 
  /* [46][0][][] */ -51,-36,64,51,-127,-126,-30,0, 
  /* [47][0][][] */ -22,56,41,-102,-127,35,-14,58, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023648536298424006, 0.0031089098192751408, 0.0038585776928812265, 0.0020499718375504017, 0.0026352265849709511, 0.0027081642765551805, 0.0020868419669568539, 0.001819426310248673, 0.0026247722562402487, 0.0032270560041069984, 0.0021908872295171022, 0.0016624073032289743, 0.0035015586763620377, 0.003525774460285902, 0.0023810884449630976, 0.0021786848083138466, 0.0024652117863297462, 0.002701637102290988, 0.0020810521673411131, 0.0035422316286712885, 0.0030868900939822197, 0.0025365850888192654, 0.0018425279995426536, 0.0019365430343896151, 0.0024298257194459438, 0.0023868666030466557, 0.0031917081214487553, 0.0033464208245277405, 0.0012550813844427466, 0.0031203960534185171, 0.0019112545996904373, 0.0019107511034235358, 0.0023713195696473122, 0.0022894109133630991, 0.0027204419020563364, 0.0026972764171659946, 0.0028571153525263071, 0.0030703532975167036, 0.002413290785625577, 0.0020815187599509954, 0.003762467997148633, 0.0013271055649966002, 0.0013613132759928703, 0.0027608729433268309, 0.001472769770771265, 0.002962498227134347, 0.0030987150967121124, 0.002786197466775775, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2590, 63, 22237, -5356, 4077, -13443, 2697, -14967, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.928651707014069e-05, 0.00010791591921588406, 0.00014731152623426169, 0.00011345685925334692, 0.0001327958598267287, 0.00013080921780783683, 8.0802950833458453e-05, 8.6576343164779246e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-50,-17,-69,-3,-16,91,85,-94,-92,-32,10,-51,0,-62,39,-85,17,17,127,60,-23,13,94,72,79,27,2,-89,-55,-83,-50,-52,103,40,-45,30,-32,91,-2,22,2,3,-99,46,-36,-37,-82, 
  /* [1][0][][] */ -13,51,-22,-33,-78,67,-18,-47,-37,73,-18,23,61,48,-49,-5,-18,-123,84,-48,127,8,-63,31,63,0,-81,59,38,-13,73,34,-29,-19,7,-18,3,103,-19,-22,65,38,-4,10,111,10,-35,65, 
  /* [2][0][][] */ -23,-31,117,6,84,-38,-11,26,-33,-3,-13,50,12,-43,-47,-127,-49,-94,-19,17,-92,20,-38,-36,-45,23,-4,-50,-39,7,-33,-14,0,-4,30,-4,29,-32,-51,12,34,-37,34,-46,-41,-44,-60,-47, 
  /* [3][0][][] */ 50,17,66,6,11,-26,34,72,-54,-29,49,-20,-67,62,-19,52,70,28,-27,32,-111,-60,127,0,11,7,-54,-40,-48,73,118,-68,14,-112,-14,42,-6,-87,-16,79,-73,-66,64,-4,-91,-78,56,-3, 
  /* [4][0][][] */ 21,-16,76,-29,7,-8,0,-1,-55,-4,-20,8,46,-75,40,-95,44,51,-13,-33,11,34,21,4,3,3,59,-18,30,23,-127,-13,-30,-17,5,18,48,-2,32,5,-43,-10,-64,28,-10,-96,3,19, 
  /* [5][0][][] */ 23,-50,56,24,26,23,21,-2,-79,-11,-51,32,26,11,11,-48,95,66,2,-13,81,-63,127,-82,-19,47,1,40,7,11,-33,-49,-12,-49,-35,7,43,22,63,1,-73,22,34,23,45,-22,76,-4, 
  /* [6][0][][] */ -51,53,-127,86,53,23,43,21,-28,-9,70,-81,-96,-21,-25,23,-123,32,-9,92,25,50,-87,-95,-7,-19,30,76,-35,-39,-51,14,35,78,-49,-26,-9,-7,86,5,69,65,-126,-51,-32,119,-60,-38, 
  /* [7][0][][] */ 32,79,-87,22,20,59,120,73,45,82,-108,-9,-45,-1,-69,-50,31,42,117,108,90,-7,127,24,109,106,-57,110,-76,27,3,-76,12,-69,-30,31,-1,111,-63,84,-65,56,-4,-81,76,-15,54,-46, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0042196768335998058, 0.0045864265412092209, 0.0062607396394014359, 0.004821916576474905, 0.005643824115395546, 0.0055593918077647686, 0.0034341253340244293, 0.0036794943735003471, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 242, 10862, -66, 97, 1507, -1477, 2450, -170, -4881, 166, -8048, 21, 64, -766, -2371, 3812, 4479, 902, -496, -3936, -6974, -446, 14750, -3843, -2430, -951, 4096, -6282, 577, 489, -7699, 8389, 4908, -829, 2825, -145, 14, -374, 9309, -105, 7010, -2024, 3628, 5981, -266, 9510, -2533, 173, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035941193345934153, 0.00015902804443612695, 0.00080122658982872963, 0.0002306969981873408, 0.00023340368352364749, 0.00022589339641854167, 0.00020560721168294549, 0.00030861410778015852, 9.724382107378915e-05, 0.00035445243702270091, 0.00018344687123317271, 0.0010074670426547527, 0.00047496764454990625, 0.00063478329684585333, 0.0003543398343026638, 0.00065727281617000699, 0.0002366024418734014, 7.0977977884467691e-05, 0.00022144202375784516, 0.00029637417173944414, 0.00025075511075556278, 0.00018364278366789222, 9.9163124104961753e-05, 0.0004845689982175827, 0.0001734699762891978, 0.00035946725984103978, 0.00053974532056599855, 0.00020230872905813158, 0.00023741119366604835, 0.00036011438351124525, 0.00015205834642983973, 0.00014382055087480694, 0.00014680819003842771, 0.00020390808640513569, 0.00016342583694495261, 0.00034541712375357747, 0.0020753438584506512, 0.0003575798764359206, 0.00014873509644530714, 0.00022232549963518977, 0.00016333622625097632, 0.00014899717643857002, 0.00026259277365170419, 0.00018862927390728146, 0.00029097593505866826, 9.3298636784311384e-05, 7.4664676503743976e-05, 0.00018290070875082165, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,-41,8,5,-25,-117,-46,46,-27,-9,3,5,45,-2,-12,8,94,16,23,3,0,-27,-68,16,-2,-13,-4,-32,-64,69,-13,-104,56,0,-43,-55,-9,-34,8,-20,-20,46,4,8,-17,57,127,-14, -127,-96,-25,127,-73,77,-102,127,36,13,16,-7,50,26,-1,-37,-26,66,28,7,12,127,9,127,127,-29,-45,32,61,-126,-4,-73,72,0,-30,-126,22,13,-55,-58,-127,-10,-95,-127,33,50,56,111, -15,1,10,8,-30,30,39,48,11,-35,9,1,-21,2,-3,8,-57,35,-66,-28,-7,-34,127,20,-48,5,14,5,11,36,11,18,-10,-10,-28,74,7,4,13,68,25,-29,23,-37,-12,37,-18,-14, 
  /* [0][1][][] */ -11,-21,-30,-4,27,-118,127,-87,-6,9,36,34,127,16,-2,-33,-19,-33,30,44,59,-69,38,9,-57,127,-81,-24,127,-94,43,-127,-40,6,-73,17,11,-62,-40,7,112,127,5,-119,-69,-61,0,82, 96,-127,127,-5,127,80,-73,-58,33,127,127,-127,-93,127,127,127,127,127,127,127,127,122,3,2,118,-97,-127,115,31,127,127,1,-127,127,127,127,-127,127,-127,-120,35,32,-127,-41,127,-127,-11,73, 19,29,-42,-7,-54,127,-121,91,110,-72,25,60,-36,10,13,-66,16,7,-122,15,20,-114,-30,-6,76,-11,-17,127,-82,-38,26,-32,-38,17,95,-25,38,-5,-4,-83,107,-4,29,40,-60,92,95,-75, 
  /* [0][2][][] */ -2,20,5,-33,-4,-70,-21,-9,7,-1,9,2,-18,-17,-3,-1,-47,12,13,-35,-1,-17,78,-15,-108,7,45,-26,14,-1,-1,35,-6,-7,-59,30,0,-13,24,51,-29,3,7,8,-20,15,-7,8, 38,-26,-37,-40,26,42,120,-107,127,-28,-1,6,-73,-25,-17,-69,-17,105,9,25,13,42,-21,-37,-80,57,88,-3,-98,10,-32,-7,-20,4,-27,3,55,-26,7,127,-115,-6,-10,51,31,51,11,-127, -12,23,3,-21,-16,-7,-6,-59,-23,-20,2,4,17,-15,-8,14,48,36,-26,-18,-6,-16,-46,-17,21,-25,32,-9,-23,-1,-7,18,23,-8,-21,-50,-6,3,34,25,-10,-17,5,6,-17,16,62,-48, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015275007113814354, 0.006758691743016243, 0.034052129834890366, 0.0098046222701668739, 0.009919656440615654, 0.0096004689112305641, 0.008738306351006031, 0.013116098940372467, 0.0041328622028231621, 0.01506422832608223, 0.0077964919619262218, 0.042817346751689911, 0.020186124369502068, 0.02697828970849514, 0.015059442259371281, 0.02793409489095211, 0.010055603459477425, 0.0030165640637278557, 0.0094112856313586235, 0.012595902197062969, 0.010657092556357384, 0.0078048184514045715, 0.0042144325561821461, 0.02059418149292469, 0.0073724738322198391, 0.015277357771992683, 0.022939175367355347, 0.0085981208831071854, 0.010089975781738758, 0.015304860658943653, 0.0064624794758856297, 0.0061123734340071678, 0.0062393480911850929, 0.0086660934612154961, 0.0069455979391932487, 0.014680227264761925, 0.088202111423015594, 0.015197144821286201, 0.0063212416134774685, 0.0094488337635993958, 0.0069417897611856461, 0.0063323797658085823, 0.011160192079842091, 0.0080167436972260475, 0.012366477400064468, 0.0039651920087635517, 0.0031732486095279455, 0.007773280143737793, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 4216, 6277, 16585, 1610, 3164, -2246, 6216, 16482, 4397, -1237, 4352, -2430, 23584, -2229, 2215, 22524, -593, 2352, 165, 3552, 5315, 4011, 592, 35367, 8515, 3990, 18445, 2160, 6406, 7237, 626, 1219, 907, 1788, -347, 297, -3200, -750, 2989, 3152, 5112, 3291, 4777, 4298, 5962, 4086, 1984, 8305, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00014455219206865877, 0.00013424329517874867, 5.8769801398739219e-05, 0.0001742371532600373, 0.0001704900641925633, 0.00017128474428318441, 0.00012673300807364285, 5.9560825320659205e-05, 0.0001298845891142264, 0.00016535696340724826, 0.00018068875942844898, 0.00019004562636837363, 4.2037314415210858e-05, 0.000199142872588709, 0.0002144430618500337, 4.6782788558630273e-05, 0.00023856545158196241, 0.00017889792798087001, 0.00021185213699936867, 0.00017699114687275141, 0.00013824326742906123, 0.00018463587912265211, 0.00032424810342490673, 3.1602903618477285e-05, 0.00010099179780809209, 0.00013855460565537214, 5.6544013204984367e-05, 0.00019064097432419658, 0.00012183939543319866, 0.00010852204286493361, 0.00038371019763872027, 0.00036222217022441328, 0.00021744190598838031, 0.00019389680528547615, 0.00021158525487408042, 0.00022129413264337927, 0.00017896616191137582, 0.00020309201499912888, 0.0001886487880256027, 0.00016690403572283685, 0.00015621288912370801, 0.00015785233699716628, 0.00017396917974110693, 0.00018359857494942844, 0.00012285768752917647, 0.0001777036814019084, 0.00033138995058834553, 0.00010013322753366083, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 62,127,-95,-94,15,88,15,64, 
  /* [1][0][][] */ 66,-79,49,-127,-65,73,-94,-52, 
  /* [2][0][][] */ -22,127,112,49,102,-1,43,7, 
  /* [3][0][][] */ 109,39,-98,63,-6,-103,-127,-42, 
  /* [4][0][][] */ -49,31,22,-57,-44,118,127,50, 
  /* [5][0][][] */ 19,73,-127,-76,38,90,33,-28, 
  /* [6][0][][] */ -4,127,66,65,86,13,23,-106, 
  /* [7][0][][] */ 127,-13,-35,26,28,1,102,21, 
  /* [8][0][][] */ 48,127,65,93,124,79,101,-84, 
  /* [9][0][][] */ 60,105,-127,-92,9,94,11,64, 
  /* [10][0][][] */ -71,-46,22,-48,-2,-30,-48,127, 
  /* [11][0][][] */ 11,-107,-127,-12,16,-8,40,-10, 
  /* [12][0][][] */ -38,-119,-116,-26,-127,23,-62,43, 
  /* [13][0][][] */ -11,11,-98,104,-127,-26,-1,-16, 
  /* [14][0][][] */ -61,-41,-127,-5,34,-2,-12,-58, 
  /* [15][0][][] */ 23,-107,-127,12,-99,-29,-29,-14, 
  /* [16][0][][] */ 127,-72,-23,71,-92,29,36,104, 
  /* [17][0][][] */ -23,110,127,-24,-45,-10,-27,-21, 
  /* [18][0][][] */ 7,-127,40,62,-5,-59,50,-87, 
  /* [19][0][][] */ 127,-48,-59,39,-103,6,40,100, 
  /* [20][0][][] */ -30,-127,77,68,-17,-85,1,-74, 
  /* [21][0][][] */ -7,-46,-11,-33,127,-6,44,22, 
  /* [22][0][][] */ -127,26,-83,45,43,58,-87,-105, 
  /* [23][0][][] */ -89,-47,69,-5,-109,127,121,-49, 
  /* [24][0][][] */ -39,67,5,-51,-50,127,121,11, 
  /* [25][0][][] */ -51,-117,-127,-56,-46,-13,-21,-44, 
  /* [26][0][][] */ -21,59,-11,127,-97,40,-48,0, 
  /* [27][0][][] */ 12,-127,27,69,11,-49,9,-121, 
  /* [28][0][][] */ 15,127,61,43,97,-21,17,-60, 
  /* [29][0][][] */ 108,25,-48,-9,89,-127,-102,33, 
  /* [30][0][][] */ 28,-7,34,-127,22,-24,15,-26, 
  /* [31][0][][] */ 43,-43,3,66,-16,31,12,127, 
  /* [32][0][][] */ -81,-61,15,-60,-64,127,55,85, 
  /* [33][0][][] */ -36,41,57,-36,40,127,-112,80, 
  /* [34][0][][] */ 23,127,-74,-44,14,49,-63,66, 
  /* [35][0][][] */ 15,-127,27,49,-22,-57,38,-72, 
  /* [36][0][][] */ -20,-30,-80,-12,-127,-55,-17,13, 
  /* [37][0][][] */ -52,-127,63,75,-47,-83,-9,-50, 
  /* [38][0][][] */ -72,25,68,-72,-127,-91,-63,89, 
  /* [39][0][][] */ 62,-127,70,43,-9,-71,-4,-77, 
  /* [40][0][][] */ 0,57,22,48,-127,-12,-52,20, 
  /* [41][0][][] */ 102,127,-88,-115,49,27,0,20, 
  /* [42][0][][] */ -11,-35,-9,15,127,14,43,23, 
  /* [43][0][][] */ 127,21,76,20,-68,-24,62,105, 
  /* [44][0][][] */ 73,46,-24,14,78,-122,-127,22, 
  /* [45][0][][] */ 44,10,17,19,71,-127,-6,-57, 
  /* [46][0][][] */ 52,-43,-13,127,35,58,25,69, 
  /* [47][0][][] */ -87,-90,55,62,-55,10,127,-75, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0024806123692542315, 0.0023037048522382975, 0.0010085290996357799, 0.0029900260269641876, 0.0029257235582917929, 0.0029393606819212437, 0.0021748233120888472, 0.0010221035918220878, 0.0022289063781499863, 0.0028376360423862934, 0.0031007400248199701, 0.0032613100484013557, 0.00072138843825086951, 0.0034174248576164246, 0.0036799863446503878, 0.000802823924459517, 0.0040939426980912685, 0.0030700082425028086, 0.0036355243064463139, 0.0030372864566743374, 0.0023723470512777567, 0.0031684751156717539, 0.0055643143132328987, 0.00054232694674283266, 0.0017330867704004049, 0.002377689816057682, 0.00097033311612904072, 0.0032715266570448875, 0.0020908454898744822, 0.0018623108044266701, 0.0065847234800457954, 0.0062159746885299683, 0.0037314486689865589, 0.003327398793771863, 0.0036309445276856422, 0.0037975553423166275, 0.0030711791478097439, 0.0034851948730647564, 0.0032373394351452589, 0.0028641850221902132, 0.0026807177346199751, 0.0027088515926152468, 0.00298542738892138, 0.0031506742816418409, 0.002108320128172636, 0.0030495140235871077, 0.0056868731044232845, 0.0017183531308546662, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7600, 15278, -4976, 8827, -1492, 4720, -11934, -19303, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00025675958022475243, 0.00013380960444919765, 0.00015463886666111648, 0.00014805590035393834, 0.0001874026347650215, 0.00014968270261306316, 0.00018627096142154187, 0.00014291485422290862, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,-3,30,12,-33,-16,11,9,-43,-7,-64,-54,-26,-65,-10,-32,44,-37,37,43,-16,33,-35,14,0,-40,54,-13,-7,-17,17,11,80,33,34,-127,16,-3,-17,-32,3,-16,42,45,33,5,25,1, 
  /* [1][0][][] */ 3,41,68,-22,-12,45,-49,-28,-1,23,-19,-94,14,87,-19,58,-17,20,-24,-59,12,-77,-28,25,-76,-14,-1,-117,-28,-18,33,-54,52,78,-42,7,127,-31,6,49,-27,41,-81,-26,113,-19,-32,-27, 
  /* [2][0][][] */ -4,-19,-59,13,-6,44,26,4,-11,40,-1,24,63,-89,15,-61,34,-86,24,35,-21,54,-2,25,-16,62,-20,-68,15,3,19,-70,-42,-87,35,-27,104,19,-12,-57,1,29,80,29,127,15,19,24, 
  /* [3][0][][] */ -7,25,-72,47,13,-37,-73,-106,10,-25,-40,3,1,24,33,78,-11,19,-39,24,1,-103,27,-58,-78,-11,127,-15,-48,0,-67,19,-3,-87,8,-14,-26,-43,-19,106,-48,-35,-3,18,36,6,-43,45, 
  /* [4][0][][] */ -25,-44,-4,6,29,-27,-10,-8,27,-28,59,-78,7,31,8,11,-13,-25,14,-15,-1,-50,3,-19,17,-7,41,46,34,22,-16,25,-8,0,4,-2,-64,83,33,-24,29,-17,-19,-22,-73,12,127,11, 
  /* [5][0][][] */ 45,-17,1,17,23,-44,31,-127,22,-30,-16,119,-80,61,24,-68,-5,-86,10,4,-40,61,-40,-45,-62,71,-29,2,-26,45,-39,-33,23,46,30,-7,-44,-12,-44,-37,12,-38,-48,-11,-37,54,83,20, 
  /* [6][0][][] */ 52,-20,21,-12,-35,-19,-35,19,-37,8,-42,127,-41,-35,-4,54,9,45,16,34,33,-80,-19,17,24,41,-65,7,10,-39,12,36,5,16,-16,0,11,-1,-4,-4,-9,-16,41,57,-1,-36,70,-15, 
  /* [7][0][][] */ -28,3,-10,65,34,28,6,29,25,8,67,-3,126,107,65,51,46,46,-16,7,22,-20,-84,-30,20,0,-27,66,33,-25,-32,-19,35,4,43,-93,-73,37,39,55,-29,32,87,127,-55,-29,-107,59, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010912281461060047, 0.0056869080290198326, 0.0065721515566110611, 0.006292375735938549, 0.0079646119847893715, 0.0063615147955715656, 0.0079165156930685043, 0.0060738809406757355, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12904, 5365, 5518, -628, 422, -1161, -919, 31459, -269, 1132, 6573, 53440, 718, 3646, -300, 12020, -997, 12661, 1544, 8542, 10606, 284, 3211, -10021, 12545, 953, 329, 14025, -1456, -1208, -9923, 11769, 4630, 2413, 572, 4468, -9424, 10052, -1331, 17926, -1734, -361, 3832, 1546, -506, -1355, 2352, -506, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.6021616880316287e-05, 9.8632452136371285e-05, 0.00014323869254440069, 0.00015151755360420793, 0.00064754381310194731, 0.00015084874758031219, 0.0001700118591543287, 0.00011223971523577347, 0.00012173315190011635, 6.7998880695085973e-05, 6.5767642809078097e-05, 5.6860793847590685e-05, 9.0579487732611597e-05, 6.2129918660502881e-05, 0.00022117380285635591, 0.00017396005569025874, 0.00011717920278897509, 0.00037278447416611016, 0.00013333390234038234, 0.00015163917851168662, 0.00011925918806809932, 0.00042401687824167311, 0.00012812652857974172, 0.00020090793259441853, 0.00011925350554520264, 0.00010095904144691303, 6.1425809690263122e-05, 9.6513278549537063e-05, 0.00015863229054957628, 0.00085138058057054877, 0.00020567871979437768, 8.9966531959362328e-05, 9.8227668786421418e-05, 0.00012973885168321431, 0.00016359449364244938, 6.1350314354058355e-05, 9.9635857623070478e-05, 4.5322431105887517e-05, 0.00011808090494014323, 6.8673529312945902e-05, 0.00013882921484764665, 0.00013684821897186339, 7.4571718869265169e-05, 8.6860964074730873e-05, 8.7016909674275666e-05, 0.00029571115737780929, 6.5127082052640617e-05, 0.00018200879276264459, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -54,-89,-25,-20,127,-50,78,-64,-87,-81,-16,-37,105,42,61,-121,61,-25,1,-43,-77,104,-1,20,-27,73,62,-26,90,-71,16,-42,-104,-92,41,77,23,81,109,-76,-123,-19,23,67,43,-127,98,77, -58,-127,-81,48,-82,105,57,-70,-66,44,87,-106,127,89,119,-75,-83,-88,29,-52,-73,95,-63,118,-90,95,87,-121,100,-52,6,-127,-50,-90,70,125,118,119,127,-66,-127,-65,63,86,83,112,99,76, 4,-58,-79,96,-41,-28,26,-13,89,24,65,-67,27,51,-38,0,-84,-14,27,-31,-17,2,-70,-1,-78,36,12,-92,38,57,121,-71,11,11,-14,44,76,67,41,-4,-20,92,65,34,37,28,15,-115, 
  /* [0][1][][] */ -117,-93,-31,-66,-81,-69,109,-116,-127,-127,93,-72,88,53,-127,-86,127,-127,-61,-79,-92,113,-42,15,-24,97,118,-45,-104,-78,1,-48,-90,-127,-127,72,40,89,7,-95,68,-20,69,116,77,113,124,-127, -127,-127,-127,-103,-32,127,127,-127,89,67,127,-127,110,127,73,-127,54,-93,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-14,-119,-127,-114,44,127,127,127,-6,-127,104,-97,127,127,127,1,127,113, -47,-67,-126,127,74,-43,39,-30,63,31,21,-56,20,62,83,-58,-17,8,-18,-70,-54,8,-78,-18,-113,45,23,-88,-49,41,127,-89,-64,12,56,72,82,72,-20,-32,45,127,82,24,52,-44,17,23, 
  /* [0][2][][] */ -103,-25,10,21,-44,-28,26,-49,21,-43,23,-29,7,24,-37,-20,-83,-19,90,-38,-3,39,-55,-10,-12,53,80,-15,42,58,-5,1,14,-84,-45,42,14,10,-60,-46,25,-10,36,38,23,57,19,-67, -80,-39,-33,-69,87,42,44,-55,90,27,-35,-53,5,42,-122,-86,35,13,46,-67,-34,32,-54,53,-62,56,74,-34,45,5,-29,-39,-59,-27,-67,54,27,20,-105,-64,27,-46,80,69,46,-105,26,3, -26,-32,-44,-17,-21,-14,8,-24,-70,18,-10,-10,-1,14,44,-27,32,43,-3,-53,-20,-21,-6,-32,-52,5,15,-30,15,-62,56,-26,-86,25,17,42,18,17,-56,-32,5,42,30,24,14,1,9,38, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036559186410158873, 0.0041918791830539703, 0.0060876444913446903, 0.0064394958317279816, 0.027520611882209778, 0.0064110714010894299, 0.0072255036793649197, 0.0047701876610517502, 0.0051736589521169662, 0.002889952389523387, 0.0027951246593147516, 0.0024165837094187737, 0.0038496281486004591, 0.0026405216194689274, 0.00939988624304533, 0.007393302395939827, 0.0049801161512732506, 0.015843339264392853, 0.0056666908785700798, 0.0064446646720170975, 0.0050685154274106026, 0.018020717427134514, 0.0054453774355351925, 0.0085385870188474655, 0.0050682737492024899, 0.0042907590977847576, 0.0026105968281626701, 0.0041018142364919186, 0.0067418720573186874, 0.036183673888444901, 0.0087413452565670013, 0.0038235774263739586, 0.0041746757924556732, 0.0055139008909463882, 0.0069527658633887768, 0.0026073884218931198, 0.0042345239780843258, 0.0019262032583355904, 0.0050184382125735283, 0.0029186250176280737, 0.0059002414345741272, 0.0058160489425063133, 0.0031692979391664267, 0.0036915908567607403, 0.0036982186138629913, 0.012567724101245403, 0.0027679009363055229, 0.0077353734523057938, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1476, -565, -653, 1436, 14329, 2500, -524, 5274, 1692, 1596, 322, 3098, 1426, 719, -1254, 569, 3458, 13178, 3649, -832, 1272, -1493, -137, 2697, -405, -763, 2100, -21, 3675, 19607, 2691, -29, 519, -141, 2842, -58, 609, -220, 1555, 1362, 1805, 2779, 391, -436, 874, 2207, 1403, -173, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00034585464163683355, 0.00034333352232351899, 0.00021654393640346825, 0.00025798368733376265, 6.8287030444480479e-05, 0.00025602863752283156, 0.00046088331146165729, 0.00017078105884138495, 0.00026570010231807828, 0.00040985798113979399, 0.00027405758737586439, 0.00027664532535709441, 0.00018252867448609322, 0.00029005203396081924, 0.00023059410159476101, 0.00027863221475854516, 0.00020842238154727966, 7.2643088060431182e-05, 0.00021072958770673722, 0.00028456281870603561, 0.00034221107489429414, 0.00016769743524491787, 0.00036544437170960009, 0.00028525758534669876, 0.00037964418879710138, 0.00067812349880114198, 0.00025866724899969995, 0.00078146508894860744, 0.00021539568842854351, 5.0983511755475774e-05, 0.00027904054149985313, 0.00065406592329964042, 0.00033822222030721605, 0.00030790548771619797, 0.0002585069159977138, 0.00028487219242379069, 0.00035914542968384922, 0.00053817807929590344, 0.00029954541241750121, 0.00042918761027976871, 0.00030037030228413641, 0.00024232779105659574, 0.00024907238548621535, 0.00036041639395989478, 0.00034333532676100731, 0.00021763084805570543, 0.00024076233967207372, 0.00026352921850048006, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -46,32,2,-19,-79,-38,-127,35, 
  /* [1][0][][] */ 87,-80,-56,-50,127,-89,96,25, 
  /* [2][0][][] */ -115,123,-53,-127,50,-22,-27,50, 
  /* [3][0][][] */ 52,17,93,7,95,123,127,-15, 
  /* [4][0][][] */ -72,-127,59,7,-59,-103,8,-35, 
  /* [5][0][][] */ 127,-24,63,68,-75,-11,4,-23, 
  /* [6][0][][] */ 22,34,127,-27,40,-39,-40,27, 
  /* [7][0][][] */ 27,12,-127,-42,-37,104,97,-78, 
  /* [8][0][][] */ 0,127,-35,11,56,97,49,52, 
  /* [9][0][][] */ -10,117,-69,92,11,-113,37,127, 
  /* [10][0][][] */ 7,-127,-3,-22,-80,-121,-52,-81, 
  /* [11][0][][] */ -127,-85,100,48,-15,-64,95,65, 
  /* [12][0][][] */ -30,39,-127,82,33,-57,-65,96, 
  /* [13][0][][] */ 93,-127,95,79,9,39,39,-58, 
  /* [14][0][][] */ -30,104,-46,-127,-20,-113,-27,-58, 
  /* [15][0][][] */ 39,109,32,-17,34,-66,96,-127, 
  /* [16][0][][] */ -117,-127,-63,97,-52,22,-21,77, 
  /* [17][0][][] */ -31,-109,-127,81,-65,69,-49,71, 
  /* [18][0][][] */ -94,-72,-53,89,-5,70,-3,127, 
  /* [19][0][][] */ 67,-127,109,-126,13,-67,35,-33, 
  /* [20][0][][] */ -6,68,31,13,36,127,77,-11, 
  /* [21][0][][] */ 25,114,47,-34,38,-70,94,-127, 
  /* [22][0][][] */ 21,12,100,20,-8,127,31,-34, 
  /* [23][0][][] */ -103,-64,32,-76,91,88,-62,-127, 
  /* [24][0][][] */ -100,-91,42,-90,111,117,-42,-127, 
  /* [25][0][][] */ 127,11,-55,-13,16,30,-57,-12, 
  /* [26][0][][] */ -127,-39,-124,-30,-54,-29,16,-6, 
  /* [27][0][][] */ 78,33,-1,-60,-127,-23,91,93, 
  /* [28][0][][] */ -127,-92,5,55,-82,-103,10,3, 
  /* [29][0][][] */ 126,100,51,-127,20,10,-66,-106, 
  /* [30][0][][] */ -94,-72,39,-72,71,81,-57,-127, 
  /* [31][0][][] */ 44,43,-3,127,5,-71,10,13, 
  /* [32][0][][] */ -28,127,-6,38,22,72,-17,49, 
  /* [33][0][][] */ -40,127,-73,25,23,-32,-23,4, 
  /* [34][0][][] */ -127,-110,-55,105,-7,9,23,103, 
  /* [35][0][][] */ -51,127,-30,-4,70,109,57,71, 
  /* [36][0][][] */ 69,34,3,-49,-127,-34,107,113, 
  /* [37][0][][] */ -60,103,26,27,-127,99,-20,-97, 
  /* [38][0][][] */ 36,35,23,31,127,74,111,60, 
  /* [39][0][][] */ -23,-75,40,-16,7,37,-95,127, 
  /* [40][0][][] */ -63,-59,-75,127,-28,4,19,64, 
  /* [41][0][][] */ 127,10,57,111,-46,-2,-4,-21, 
  /* [42][0][][] */ -40,13,-68,-127,59,-108,3,81, 
  /* [43][0][][] */ 25,-5,84,-3,39,127,90,8, 
  /* [44][0][][] */ -31,-27,-68,127,48,15,-43,-38, 
  /* [45][0][][] */ 57,127,108,-111,46,-61,12,-107, 
  /* [46][0][][] */ -33,-127,-43,37,-11,38,-63,121, 
  /* [47][0][][] */ 40,44,127,-1,100,119,127,-28, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0042304364033043385, 0.0041995984502136707, 0.0026487293653190136, 0.0031556133180856705, 0.00083527556853368878, 0.0031316997483372688, 0.0056374478153884411, 0.0020889653824269772, 0.0032499993685632944, 0.0050133145414292812, 0.0033522266894578934, 0.0033838795498013496, 0.0022326603066176176, 0.0035478679928928614, 0.0028205886483192444, 0.0034081826452165842, 0.0025493877474218607, 0.00088855810463428497, 0.0025776091497391462, 0.0034807249903678894, 0.0041858688928186893, 0.0020512470509856939, 0.0044700545258820057, 0.003489223076030612, 0.0046437443234026432, 0.0082946931943297386, 0.0031639744993299246, 0.0095587503165006638, 0.0026346840895712376, 0.00062362180324271321, 0.003413177328184247, 0.0080004250630736351, 0.004137077834457159, 0.0037662484683096409, 0.003162013366818428, 0.0034845091868191957, 0.0043930071406066418, 0.0065829041413962841, 0.003663989482447505, 0.005249751266092062, 0.0036740794312208891, 0.0029641131404787302, 0.0030466120224446058, 0.0044085532426834106, 0.0041996203362941742, 0.0026620242279022932, 0.0029449646826833487, 0.0032234452664852142, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7137, -2604, 11997, -10077, 23827, 7822, -9020, 10717, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017493727500550449, 0.00020429216965567321, 0.00016850265092216432, 0.0002449577150400728, 0.00018076553533319384, 0.00015820599219296128, 0.00016026878438424319, 0.00026989870821125805, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -8,-16,-23,-68,-27,-35,17,-24,39,6,-33,-9,112,127,-24,-105, 
  /* [1][0][][] */ 127,-60,-42,15,-45,74,-70,-43,-41,84,-34,-54,-10,1,-63,-15, 
  /* [2][0][][] */ -38,-98,43,42,49,-55,-79,-19,33,-89,26,-127,48,-25,-74,26, 
  /* [3][0][][] */ 36,14,18,16,-9,71,-50,-20,127,47,11,26,2,-15,15,24, 
  /* [4][0][][] */ -99,-39,-24,-127,-11,40,57,-124,33,-19,-49,-40,-127,31,-41,-27, 
  /* [5][0][][] */ 88,51,70,-29,50,-49,-127,-126,-18,-75,65,52,-56,52,63,-46, 
  /* [6][0][][] */ 112,38,-127,-82,27,-75,3,-95,-45,19,-127,97,91,-91,9,73, 
  /* [7][0][][] */ -127,-1,95,-29,-62,5,1,-60,-48,61,82,-30,62,-25,32,31, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0074348342604935169, 0.0086824167519807816, 0.007161362562328577, 0.010410702787339687, 0.0076825353316962719, 0.0067237545736134052, 0.0068114232271909714, 0.011470695026218891, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 21508, -517, -233, 3110, -405, 69, 10905, 1306, -304, 534, -2268, 2854, 1224, -333, -409, -1287, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0001057965710060671, 0.00020683382172137499, 0.00016285119636449963, 0.00017890267190523446, 0.0010631360346451402, 0.00078317208681255579, 0.00015044827887322754, 0.00078829616541042924, 0.00029404895030893385, 0.00087645405437797308, 0.00023891856835689396, 0.00019852924742735922, 9.4653390988241881e-05, 0.00020611485524568707, 0.00021029761410318315, 0.00050824589561671019, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -1,-6,7,2,-20,11,8,17,-6,-12,0,-12,1,-7,1,1, 4,-4,5,1,12,-1,11,-25,-8,9,-7,88,-9,21,7,2, 1,-5,-2,1,0,-13,-2,11,2,2,-6,-9,3,-5,-4,0, 
  /* [0][1][][] */ 11,-10,3,4,127,-23,-127,-21,127,127,0,-7,113,-24,-1,-18, -127,127,127,-1,-89,-90,-17,-101,17,-106,127,127,127,127,127,127, 22,-7,-5,1,-12,127,3,-10,-3,-13,-8,-7,12,-4,-14,-8, 
  /* [0][2][][] */ 0,-3,2,-14,-20,16,55,7,-8,-8,1,-3,-4,0,-7,-10, 22,-13,-3,-127,5,-15,-13,127,-5,1,2,-17,-10,-58,-8,-35, 4,-7,-1,-2,-1,-4,-2,-3,-2,2,-2,-3,2,-5,-9,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0044963541440665722, 0.0087904371321201324, 0.0069211754016578197, 0.0076033635996282101, 0.045183282345533371, 0.033284813165664673, 0.006394051481038332, 0.033502586185932159, 0.012497079558670521, 0.037249296903610229, 0.010154038667678833, 0.0084374928846955299, 0.0040227691642940044, 0.0087598813697695732, 0.0089376484975218773, 0.021600449457764626, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 782, -266, 214, 330, 51009, 42700, 5659, 6657, 7077, 7192, 921, -132, 6371, -6264, -383, 31372, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0002321334759471938, 0.0010190675966441631, 0.00027271048747934401, 0.00017434517212677747, 2.8697071684291586e-05, 3.6392080801306292e-05, 0.00014967637252993882, 3.2625513995299116e-05, 0.00013024770305491984, 4.1087598219746724e-05, 0.00048750429414212704, 0.00088670890545472503, 0.00028843767358921468, 2.019857129198499e-05, 0.00073896045796573162, 4.2415769712533802e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -84, -109, -30, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 60, 
  /* [3][1][][] */ 2, -21, -13, 
  /* [3][2][][] */ -101, -126, -42, 
  /* [4][0][][] */ 27, -59, 1, 
  /* [4][1][][] */ 27, -127, 3, 
  /* [4][2][][] */ 16, -83, -10, 
  /* [5][0][][] */ -64, 23, -1, 
  /* [5][1][][] */ -127, 29, 4, 
  /* [5][2][][] */ -81, 25, 1, 
  /* [6][0][][] */ -19, 78, 127, 
  /* [6][1][][] */ -53, 54, -18, 
  /* [6][2][][] */ -39, -54, -91, 
  /* [7][0][][] */ 34, 23, -22, 
  /* [7][1][][] */ 127, 69, -11, 
  /* [7][2][][] */ 38, 9, -21, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -88, 127, 
  /* [8][2][][] */ -27, -62, 96, 
  /* [9][0][][] */ -21, 52, -11, 
  /* [9][1][][] */ -17, 127, -13, 
  /* [9][2][][] */ -9, 88, -8, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -79, 78, 5, 
  /* [13][0][][] */ 88, 28, -10, 
  /* [13][1][][] */ 127, 103, -9, 
  /* [13][2][][] */ 77, 106, 40, 
  /* [14][0][][] */ -30, -27, 49, 
  /* [14][1][][] */ 45, 100, -127, 
  /* [14][2][][] */ -16, -70, 82, 
  /* [15][0][][] */ -91, -28, 23, 
  /* [15][1][][] */ -127, -120, 20, 
  /* [15][2][][] */ -27, -79, -9, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.059194032102823257, 0.25986221432685852, 0.069541171193122864, 0.044458016753196716, 0.007317753043025732, 0.0092799803242087364, 0.038167472928762436, 0.0083195054903626442, 0.033213160932064056, 0.010477337054908276, 0.124313585460186, 0.22611075639724731, 0.07355160266160965, 0.0051506352610886097, 0.188434898853302, 0.010816020891070366, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.081753894686698914, } };
const TfArray<1, int> quant46_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.058272786438465118, } };
const TfArray<1, int> quant50_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.052095986902713776, } };
const TfArray<1, int> quant53_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.072758868336677551, } };
const TfArray<1, int> quant54_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.020147956907749176, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.04770679771900177, } };
const TfArray<1, int> quant58_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.018211716786026955, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.019054930657148361, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.041234634816646576, } };
const TfArray<1, int> quant61_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.058737821877002716, } };
const TfArray<1, int> quant62_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.0203838050365448, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.020459515973925591, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.036797389388084412, } };
const TfArray<1, int> quant65_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.069522097706794739, } };
const TfArray<1, int> quant66_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.019707726314663887, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.036132723093032837, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.058732181787490845, } };
const TfArray<1, int> quant69_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
